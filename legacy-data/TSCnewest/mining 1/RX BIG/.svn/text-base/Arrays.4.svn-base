{	Arrays.4description:	Forth routines to allocate and access 1D, 2D, 3D arrays of s-expressions.				Support routines are in ArrayMgr.4.  Scheme routines are in Arrays.T.need to do:to improveproblems:notes:NewCentury 12point, TabStops=4, LineWrap=100.CHANGES:2/13/93 start	dhf:	first cut}\ Create a 1D array to hold xmax s-expressions: CREATE.ARRAY1  (( xmax ; arr.num -- sym ))	0 0 xmax array.new to arr.num	'' ARRAY1 name>atom to sym	sym '' MY.A.HANDLE arr.num >integer set.value	sym '' MY.XMAX xmax >integer set.value;\ Dispose of a 1D array; free its handle: DISPOSE.ARRAY1 (( sym -- ))	sym '' MY.A.HANDLE value.of integer> array.dispose	sym '' MY.A.HANDLE -1 >integer set.value	sym '' MY.XMAX 0 >integer set.value	;\ Check 1D array operation for valid parameters: ARRAY1? (( sym x -- ))	;\ Fetch an s-expression from location x; indices start at 0: ARRAY1@ (( sym x -- \ sx ))	sym x ARRAY1?	sym '' MY.A.HANDLE value.of integer> 0 0 x array@	;\ Store an s-expression to location x; indices start at 0: ARRAY1! (( sym x sx -- ))	sym x ARRAY1?	sym '' MY.A.HANDLE value.of integer> 0 0 x sx array!	;\ Display the contents of an array: DISPLAY.ARRAY (( sym -- ))	sym '' MY.A.HANDLE value.of integer> array.display	;\ Display the contents of an array: DISPLAY.COLS (( sym lst -- ))	sym '' MY.A.HANDLE value.of integer> lst cols.display	;{ *************  slightly (10%)  faster, but less informative; also see Arrays.T: CREATE.ARRAY1  (( xmax  -- \ a.handle ))	0 0 xmax array.new >integer;\ Dispose of a 1D array; free its handle: DISPOSE.ARRAY1 (( a.handle -- ))	a.handle integer> array.dispose	;\ Check 1D array operation for valid parameters: ARRAY1? (( sym x -- ))	;\ Fetch an s-expression from location x; indices start at 0: ARRAY1@ (( a.handle x -- \ sx ))	a.handle integer> 0 0 x array@	;\ Store an s-expression to location x; indices start at 0: ARRAY1! (( a.handle x sx -- ))	a.handle integer> 0 0 x sx array!	;***************** }\ Create a 2D array to hold ymax by xmax s-expressions: CREATE.ARRAY2  (( ymax xmax ; arr.num -- sym ))	0 ymax xmax array.new to arr.num	'' ARRAY2 name>atom to sym	sym '' MY.A.HANDLE arr.num >integer set.value	sym '' MY.XMAX xmax >integer set.value	sym '' MY.YMAX ymax >integer set.value;\ Dispose of a 2D array; free its handle: DISPOSE.ARRAY2 (( sym -- ))	sym '' MY.A.HANDLE value.of integer> array.dispose	sym '' MY.A.HANDLE -1 >integer set.value	sym '' MY.XMAX 0 >integer set.value	sym '' MY.YMAX 0 >integer set.value	;\ Check 2D array operation for valid parameters: ARRAY2? (( sym y x -- ))	;\ Fetch an s-expression from location (y,x); indices start at (0,0): ARRAY2@ (( sym y x -- \ sx ))	sym y x ARRAY2?	sym '' MY.A.HANDLE value.of integer> 0 y x array@	;\ Store an s-expression to location (y,x); indices start at (0,0): ARRAY2! (( sym y x sx -- ))	sym y x ARRAY2?	sym '' MY.A.HANDLE value.of integer> 0 y x sx array!	;\ Create a 3D array to hold zmax by ymax by xmax s-expressions: CREATE.ARRAY3  (( zmax ymax xmax ; arr.num -- sym ))	zmax ymax xmax array.new to arr.num	'' ARRAY3 name>atom to sym	sym '' MY.A.HANDLE arr.num >integer set.value	sym '' MY.XMAX xmax >integer set.value	sym '' MY.YMAX ymax >integer set.value	sym '' MY.ZMAX zmax >integer set.value;\ Dispose of a 3D array; free its handle: DISPOSE.ARRAY3 (( sym -- ))	sym '' MY.A.HANDLE value.of integer> array.dispose	sym '' MY.A.HANDLE -1 >integer set.value	sym '' MY.XMAX 0 >integer set.value	sym '' MY.YMAX 0 >integer set.value	sym '' MY.ZMAX 0 >integer set.value	;\ Check 3D array operation for valid parameters: ARRAY3? (( sym z y x -- ))	;\ Fetch an s-expression from location (z,y,x); indices start at (0,0,0): ARRAY3@ (( sym z y x -- \ sx ))	sym z y x ARRAY3?	sym '' MY.A.HANDLE value.of integer> z y x array@	;\ Store an s-expression to location (z,y,x); indices start at (0,0,0): ARRAY3! (( sym z y x sx -- ))	sym z y x ARRAY3?	sym '' MY.A.HANDLE value.of integer> z y x sx array!	;