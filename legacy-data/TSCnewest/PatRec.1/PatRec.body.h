/* PatRec.body.h */#pragma once#include <stdio.h>			// for printf, etc.#define	MAXNUMPROS		30				// can train or test this many proteins#define	MAXNUMAA		400				// max num of aminos per protein &&&& make this dynamic#define	NUMSTRUCTS		100				// max number of structures n a protein, e.g. helices#define	MAXNUMCHRS		16				// num chars in a file name#define	MAXNUMFILES		MAXNUMPROS		// num files for testing or training#define	NONSENSE			99				// invalid amino acid#define 	WINDOWRADIUS		9				// radius of window we are examining&&&&make a knob#define 	FEATURECOUNT		4				// possible outcomes: A, B, C, & U.	U=unknown#define 	AACOUNT			20				// Number of possible "symbols" (aminos)#define 	CATARRAYSIZE		AACOUNT*AACOUNT	// # of elements in 1-d array#define	EXEMPLARCOUNT	(MAXNUMPROS*(MAXNUMAA - WINDOWRADIUS))// ______________________________________________________________________ ENUMStypedef enum {  alpha, beta, cturn, unk	} Feature;typedef enum { gly, ala, val, leu, ile, ser, cys, thr, met, 			phe, tyr, trp, pro, his, lys, arg, asp, glu, asn, gln } Symbol;// ______________________________________________________________________ STRUCTStypedef	struct{		short		theWindow	[2*WINDOWRADIUS+1];	short		myPrediction;	long double	myDelta;						// actual delta value seen by an exemplar	short		numCorrect;					// counter for weight	short		numTried;					// counter for weight}	ExemplarStruct;typedef	struct{	short			numExemplars;	ExemplarStruct	exemplars	[EXEMPLARCOUNT];		// massive overkill}	Exemplars;typedef struct{	long double	delta	[2*WINDOWRADIUS+1];}	RatioStruct;typedef	struct{	short	featureCount	[2*WINDOWRADIUS+1];	// this makes a 2D array, FC for every window position this AA is found in, by, counts of	// features this window position and AA were found in	short	alphaCount	[2*WINDOWRADIUS+1];	short	betaCount		[2*WINDOWRADIUS+1];	short	coilCount		[2*WINDOWRADIUS+1];	RatioStruct	ratios	[AACOUNT];}	AAStruct;//	for each window position, there is a ratio reflecting the difference between frequencies of//	each amino pair//	thus, to see how a test window compares to an exemplar (made from a training window)//		for each window position, fetch the ratio reflecting the amino in the exemplar and the//			amino in the test window//		sum the ratios//	lowest ratio among all exemplars winstypedef	struct{	short	start;	short	end;}	StructStruct;// database structure for each proteintypedef	struct{		short	numAminos;	short	numHels;	short	numBets;	short	numCoils;	short	AAV	[MAXNUMAA];	// amino acid values in a protein--from enum	StructStruct	hel	[NUMSTRUCTS];	// start & end of helices	StructStruct	bet	[NUMSTRUCTS];	// start & end of betas	StructStruct	coil	[NUMSTRUCTS];	// start & end of coils}	ProStruct;typedef	struct{	char	fname	[MAXNUMCHRS];}	FStruct;typedef	struct{	short	numfiles;	FStruct	files		[MAXNUMFILES];}	FileStruct;extern AAStruct 	**AminoFrameH;extern FileStruct	**TestFilesH; extern FileStruct	**TrainFilesH;extern ProStruct		**TrainDataH;extern ProStruct		**TestDataH;extern Exemplars	**ExemplarH;void	readData					(FILE *theFile, short which, ProStruct *RawDataH);void	studyProtein				(short whichpro);void	showExemplars				(short numf);void	clearData					(ProStruct *RawDataH);short	getTrainSetup				(void);short	getTestSetup				(void);void	trainPatRec				(void);