{	IMMUNE.RBTdescription:		Xneed to do:		Xto improve:		X	PROBLEMS:		Xnotes:			Straighten out cytokine-cell interactions;  make sure cell activation				rules approrpiate; check runtime rule firing to insure that system is				operating properly/realistically!CHANGES:1/13/92			first draft1/16/92			additions2/22/92			began cleanup. NewCentury 12point, TabStops=4, LineWrap=100.				jp2: began trimming rules using new multi-fire QPT3/12/92			jp2: organize rules3/15/92			jp2: edit rules -- there's some bugs in here4/07/92			jp2: edit rules to new syntax5/29/92			jp2: edit rules -- one rule per major actor activity10/15/92			rbt: add rules for antibody, pathogens, stop on antibody production 				experiments with binding trimming10/18/92			rbt: various experiments, edit rules10/25/92			rbt: various experiments, edit rules through11/5/92			rbt: various experiments, edit rules12/18			rbt: then.say and then.log added;  rules made verbose 1/11-13/93		rbt:  Looked for gremlins--made a lot of T- and b-cell rules					"one-shot":  Set initial conditions relations to false, and					only allowed rule to fire on relations false... e.g., b-cell					digests antigens.  Makes some biological sense, and should					cut down on branching!2/12/93			rbt:  eliminated useless proliferation rules; some minor changes2/22/93			jp2: patches to fix it2/24/93			jp2: patches to update to new TSC syntax3/02/93			jp2: no more false actors -- runs on TSC 0.2b123/18/93			dhf: added "instance.of popsim.rule", other PopSim fixes				dhf: added comments about use with PopSim} \ _________________________________________________________ SUPPORT OBJECTSc:	THEN.SAY	sub.of		information.slot	instance.of	rhs.func	i.take		sx	i.give		none	arguments	*something	algorithm	( display> *something say )\ ______________________________________________________________________  RULEScomment:all rules below have been setup to work with "no false actors".  This routine in QPTwill take any actor which is "false" and delete it from the episode, then it goes and findsany relation or state referencing that actor, and deletes that too.Thus, we spend more time using then.create to bind up "new" variables so we canintroduce new actors and their relations/states at runtime, plus we make heavy useof the "if.not..." constructs to keep rules from multiple firings.comment;\ ____________________________________________________________ BINDING PROCESSEScomment:	the "no false actors" issue propagates to the rule below:	unless we have a sense.rule which creates abuttments, we need to just ignore	abuttments (read: assume they exist).  this because we cannot have the relation	in initial conditions because we cannot have the actors	we did one experiment in the metabolic pathways project with sense rules which	notice the presence of a pair of actors, and notice they don't abut, then make them abut	I'm not sure what that all means, or how it is different from the idea of just ignoring	abuttments altogether, as the example below does.comment;\ replacement antigen.binding, prevents multiple branches from arising as\ t- b-cell and macrophage rules fire separatelyc:	ANTIGEN.BINDING	level		basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	jp2	context		immunology	if.actors		( ( antigen ( *antigen ) true )				  ( B-cell ( *b-cell ) true )			 	  ( helper.T-cell ( *helper.T-cell ) true )			  	  ( macrophage ( *macrophage ) true ) )	if.not.relates		( \ ( abuts ( *macrophage *antigen  ) true )	-- ignore				   \ ( abuts ( *b-cell *antigen ) true )					-- ignore				   ( binds ( *helper.T-cell *antigen ) true )				   ( binds ( *b-cell *antigen ) true )				   ( binds ( *macrophage *antigen ) true ) )	then.relates	( ( binds ( *macrophage *antigen ) true )				  ( binds ( *helper.T-cell *antigen ) true ) 				  ( binds ( *b-cell *antigen ) true ) )	then.say		" Antigen bound to macrophage, b-cell, and helper T-cell. " comment:	this rule does a good job of making an abuttment, but there may be a problem...	we cannot do an if.relates on something which does not exist	so we choose the if.not.relates relationcomment;c:	ACTIVATED.HELPER.T-CELL.B-CELL.ABUT.1	level		basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	jp2 rbt	context		immunology	if.actors		( ( B-cell ( *B-cell ) true )				 ( act.h.t-cell ( *act.h.t-cell ) true ) )	\ if.relates	( ( abuts ( *B-cell *act.h.t-cell ) false ) )   \ jp2	if.not.relates ( ( abuts ( *b-cell *act.h.t-cell ) true ) )	then.relates 	( ( abuts ( *B-cell *act.h.t-cell ) true ) ) 	then.say		" B-cell abuts activated helper T-cell. "\ I suspect this is wrong--I recall reading that the ht-cell gets activated when it antigen-binds\ to a macrophage or b-cell presenting hla and antigen partsc:	ACTIVATED.HELPER.T-CELL.ANTIGEN.B-CELL.BINDING.1	level		basic	sub.of		phys.process 	instance.of	SENSE.RULE popsim.rule		\ jp2	my.creator	jp2 rbt	context		immunology	if.actors		( ( B-cell ( *B-cell ) true )				  ( ANTIGEN ( *ANTIGEN ) TRUE )	\ jp2 missing actor				 ( act.h.t-cell ( *act.h.t-cell ) true ) )	if.relates		(  ( presents ( *b-cell *antigen ) true )				  ( abuts ( *B-cell *act.h.t-cell ) true ) )\	if.not.relates  ( ( ANTIGEN.BINDS ( *act.h.t-cell *B-CELL ) false ) ) 	if.not.relates  ( ( ANTIGEN.BINDS ( *act.h.t-cell *B-CELL ) true ) )	\ dhf	then.relates 	( ( ANTIGEN.BINDS ( *act.h.t-cell *B-CELL ) true ) )\	THEN.ACTORS	( ( B.AB.T-CELL ( *B-CELL ) true ) )			\ jp2	then.say		" Activated helper T-cell binds B-cell bound antigen."	\ ____________________________________________________________ TRANSPORT PROCESSES\ made these rules one-shot by testing for false relation on primary output relation\ rbt 1/11/93\ modified to use the if.not.relates method--jp2 3/02/93c:	ANTIGEN.INTERNALIZATION.B	level		basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	rbt 	context		immunology	if.actors		( ( antigen ( *antigen ) true )			 	 ( b-cell ( *b-cell ) true ) )	if.relates		( ( binds ( *b-cell *antigen ) true ) )	if.not.relates	( ( contains ( *b-cell *antigen ) true ) ) 	then.relates	( ( contains ( *b-cell *antigen ) true ) )	then.say		" B-cell ingests bound antigen. "c:	ANTIGEN.INTERNALIZATION.M	level		basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	rbt 	context		immunology	if.actors		( ( antigen ( *antigen ) true )			 	 ( macrophage ( *macrophage ) true ) )	if.relates		( ( binds ( *macrophage *antigen ) true ) )	if.not.relates	( ( contains ( *macrophage *antigen ) true ) )	then.relates 	( ( contains ( *macrophage *antigen ) true ) )	then.say		" Macrophage ingests bound antigen. "	c:	ANTIGEN.PRESENTATION.B	level		basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	rbt	context		immunology	if.actors		( ( b-cell ( *b-cell ) true )				   ( antigen ( *antigen ) true ) )	if.relates		( ( digests ( *b-cell *antigen ) true ) )	if.not.relates	( ( presents ( *b-cell *antigen ) true ) )	then.relates 	( ( presents ( *b-cell *antigen ) true ) ) 	then.say		" B-cell presents processed antigen. "c:	ANTIGEN.PRESENTATION.M	level		basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	rbt	context		immunology	if.actors		( ( Macrophage ( *macrophage ) true )				   ( antigen ( *antigen ) true ) )	if.relates		( ( digests ( *macrophage *antigen ) true ) )	if.not.relates	( ( presents ( *macrophage *antigen ) true ) )	then.relates 	( ( presents ( *macrophage *antigen ) true ) ) 	then.say		" Macrophage presents processed antigen. "\ ____________________________________________________________ METABOLIC PROCESSEScomment:	There are two semantics associated with "secretes"  for PopSim translation.    The 	translation for the relation "secretes (*macrophage *csf)" creates a feature named	"secretes.csf".  A "then.relates" message will assign this feature to the macrophage actor.	An "if.relates" message will test for previous assignment of the feature.  In addition the	"then.relates" message will create a PopSim instruction to increase the level of csf as a 	background chemical.comment;c:	ANTIGEN.PROCESSING.M	level		basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	rbt	context		immunology	if.actors		( ( antigen ( *antigen ) true )				\  ( IL-1 ( *IL-1 ) false )			-- no more "false" actors				\  ( gm-csf ( *csf ) false )				  ( Macrophage ( *macrophage ) true ) )	if.relates		( ( contains ( *macrophage *antigen ) true ) )	if.not.relates	( ( digests ( *macrophage *antigen ) true ) )	then.create	( *il-1 *csf )			\ get ready to make new actors	then.actors	( ( IL-1 ( *IL-1 ) true )				 ( gm-csf ( *csf ) true ) )				 	then.relates 	(  ( digests ( *macrophage *antigen ) true )				  ( secretes ( *macrophage *IL-1 ) true ) 			 	  ( secretes ( *macrophage *csf ) true ) )	then.say		" Macrophage secretes IL-1 and CSF. "c:	ANTIGEN.PROCESSING.B	level		basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	rbt	context		immunology	if.actors		( ( B-cell ( *b-cell ) true )				   ( antigen ( *antigen ) true ) )	if.relates		( ( contains ( *b-cell *antigen ) true ) )	if.not.relates	( ( digests ( *b-cell *antigen ) true ) )	\ make this rule one-shot	then.relates 	( ( digests ( *b-cell *antigen ) true ) ) 	then.say		" B-cell digests antigen. "	\ what about proliferation???  what does PROLIFERATES mean?c:	HELPER.T-CELL.ACTIVATION.1	level		basic	sub.of		phys.process	instance.of	SENSE.RULE  popsim.rule	my.creator	jp2 rbt	context		immunology	if.actors		( ( antigen ( *antigen ) true )			  	 ( helper.T-cell ( *helper.T-cell ) true )				\ ( act.h.t-cell ( *act.h.t-cell ) false )	-- no "false" actors				 ( IL-1 ( *IL-1 ) true ) )	if.relates		( ( binds ( *helper.T-cell *antigen ) true ) )	if.not.actors	( ( act.h.t-cell ( *act.h.t-cell ) true ) )	then.create	( *act.h.t-cell )	then.relates 	( ( proliferates ( *helper.T-cell ) true ) )		then.actors	( ( act.h.t-cell ( *act.h.t-cell ) true ) )	then.say		" *Helper T-cell activated. "		   	c:	B-CELL.ACTIVATION.1	level		basic	sub.of		phys.process	instance.of	SENSE.RULE popsim.rule			\ NOTE new syntax here	my.creator	jp2 rbt	context		immunology	if.actors		( ( B-cell ( *B-cell ) true )				  ( act.h.t-cell ( *act.h.t-cell ) true ) )	if.relates		( ( ANTIGEN.BINDS ( *act.h.t-cell *B-CELL ) true ) )	if.not.actors	( ( activated.b-cell ( *b-cell ) true ) )	then.actors	( ( activated.B-cell ( *B-cell ) true ) )			then.say		" B-cell activated. "	   c:	B-CELL.CYTOKINE.RECEPTOR.PRODUCTION.1	level		basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	jp2 rbt	context		immunology	if.actors		( ( activated.B-cell ( *B-cell ) true )				 \ ( cytokine.receptor  ( *cytokine.receptor ) false )  -- no "false" actors				  ( IL-1 ( *IL-1 ) true ) )	if.not.actors	( ( cytokine.receptor  ( *cytokine.receptor ) true ) )	\ prevent refiring	then.create	( *cytokine.receptor )	then.actors	( ( cytokine.receptor  ( *cytokine.receptor ) true ) )			then.relates	( ( synthesizes ( *B-cell *cytokine.receptor ) true ) 			 	  ( attaches.to (  *IL-1 *cytokine.receptor ) true ) )	then.say		" B-cell synthesizes cytokine receptor, and IL-1 attaches to receptor. "	   \ ATTACHES.TO  & BINDS seem to be very similar usage here--compare to SRL's LINKS\	ATTACHES.TO should probably be ATTACHED.TO\ ____________________________________________________________ PROLIFERATION PROCESSESc:	BLAST.CELL.PRODUCTION.1	level		basic	sub.of		phys.process	instance.of	SENSE.RULE popsim.rule	my.creator	jp2 rbt	context		immunology	if.actors		( ( activated.B-cell ( *B-cell ) true )				   ( IL-1 ( *IL-1) true )				   ( cytokine.receptor ( *cytokine.receptor ) true ) 				   \  ( blast.cell ( *blast.cell ) false ) 				    )	if.relates		( ( synthesizes ( *B-cell *cytokine.receptor ) true ) 			  	 ( attaches.to ( *IL-1 *cytokine.receptor ) true ) )	if.not.actors	( ( blast.cell ( *blast.cell ) true ) )	then.create	( *blast.cell )	then.actors	( ( blast.cell ( *blast.cell ) true ) )	then.say		" Blast cell produced. "	c:	PLASMA.MEMORY.CELL.PRODUCTION.1	level		basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	jp2 rbt	context		immunology	if.actors		( (  blast.cell ( *blast.cell ) true ) 				   ( IL-1 ( *IL-1 ) true )				  \ ( plasma.cell ( *plasma.cell ) false )			   	   \ ( memory.cell ( *memory.cell ) false )			   	   )	if.not.actors	( ( plasma.cell ( *plasma.cell ) true )			   		  ( memory.cell ( *memory.cell ) true ) )	then.create	( *plasma.cell *memory.cell )	then.actors	( ( plasma.cell ( *plasma.cell ) true )				  ( memory.cell ( *memory.cell ) true ) )	then.say		" Plasma cell produced.  Memory cell produced. "			   	  		\ __________________________________________________ANTIBODY PRODUCTIONc:	ANTIBODY.PRODUCTION.1	level		basic	sub.of		phys.process	instance.of	SENSE.RULE popsim.rule	my.creator	rbt	context		immunology	if.actors		( ( IL-1 ( *IL-1 ) true )			   	( cytokine.receptor ( *cytokine.receptor ) true )			   	( plasma.cell ( *plasma.cell ) true ) )	if.relates		( ( attaches.to ( *IL-1 *cytokine.receptor ) true ) )	if.not.actors	( ( antibody ( *antibody ) true ) )	then.create	( *antibody )	then.actors	( ( antibody ( *antibody ) true ) )	then.say		" Plasma cell produces antibody. "			    \ ___________________________________________________INFECTIOUS AGENT PROCESSEScomment:	this rule has a problem with the "no false actors" syntax rule:		without antigen as actor, you cannot use the "excretes" relation here to limit firing	that is: we need some sort of unary relation for virus which will get changed on firing	I choose--for purposes of trials--"excited"	note that this has been added to initial conditions as well	second cut: i choose if.not.actors, and deleted "excited" from IC	No special semantics are associated with "excretes" for PopSim translation.  The default	translation for the relation "excretes (*virus *antigen)" is to create a feature named	"excretes.antigen".  A "then.relates" message will assign this feature to the virus actor.	An "if.relates" message will test for previous assignment of the feature. 	The actual production of a new antigen actor is accomplished by the combination of 	"then.create ( *antigen )" and "then.actors ( ( antigen ( *antigen ) true ) )".comment;c:	Bacterium.capsule.ANTIGEN.PRODUCTION	level			basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	rbt	context		immunology	if.actors		(  (  bacterium.capsule ( *bacterium.capsule  )  true  ) ) 				  \  ( antigen ( *antigen ) false )  	if.not.actors	( ( antigen ( *antigen ) true ) )	then.create	( *antigen )	then.actors	( ( antigen ( *antigen ) true ) )	then.relates	( ( excretes ( *bacterium.capsule *antigen ) true ) )						then.say		" bacterium.capsule excretes antigen "		\ _________________________________________ANTIBODY-PATHOGEN BINDING PROCESSES	\ next rule does not adress the fact that antigen is related--bound--to virusc:	ANTIBODY.bacterium.capsule.ANTIGEN.BINDING.1	level		basic	sub.of		phys.process	instance.of	sense.rule popsim.rule	my.creator	jp2 rbt	context		immunology	if.actors		( ( antibody ( *antibody ) true )				 (  bacterium.capsule ( *bacterium.capsule ) true ) )	if.not.relates ( ( binds ( *antibody *bacterium.capsule ) true ) )		then.relates	( ( binds ( *antibody *bacterium.capsule ) true ) )	then.say		" Antibody binds to bacterium.capsule. "	\ ____________________________________________________________ STOPPING RULEScomment:you can write stopping rules to halt construction of the envisionmentthis is a model of such a type of rulesome stopping rules are used when a branch of the tree is known to be unproductiveothers simply stop when some goal state is reachedcomment;\ stop when antibody binds antigen rbt--1015{c:	VIRAL.INGESTION.STOP.1	level		basic	sub.of		phys.process	instance.of	SENSE.RULE popsim.rule	\ dropped sense.rule until QPT code patched	my.creator	rbt	context		immunology	if.actors		( ( antibody ( *antibody ) true )				 ( virus ( *virus ) true )				 ( macrophage ( *macrophage ) true ) )	if.relates		( ( binds ( *antibody *virus )  true ) )	if.not.relates	( ( ingests ( *macrophage *virus ) true ) )	then.actors	( ( virus ( *virus ) false ) )	\ jp2--will be killed by QPT **	then.relates	( ( ingests ( *macrophage *virus ) true)				  )			 	then.terminate	expansion	then.say		" ***Macrophage ingests antibody-bound virus. "	}\ ** actually, it won't be killed by QPT because the branch is terminated