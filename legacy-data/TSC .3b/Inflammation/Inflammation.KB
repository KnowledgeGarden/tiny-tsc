{ 		Inflammation.KB 							2/17/95			startup  							 							}c:	invader.breaks.barrier		level		basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	JAR	context		immunology	if.actors	( ( invader ( *invader ) true )					( bio.cell ( *x ) true )					( serum.protein ( *serum.protein ) true )					  ( barrier ( *barrier ) true ) )	if.relates		( ( breaks ( *invader *barrier ) true ) )	if.not.actors	( ( injury ( *injury ) true ) )	then.create		( *injury )	then.actors		( ( injury ( *injury ) true ) ) 	then.states		( ( exudes ( *injury *serum.protein ) true ) )	then.say		"invader causes exudation"	c:	invader.causes.edema			 	level		basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	JAR	context		immunology	if.actors	( ( invader ( *invader ) true )					( bio.cell ( *x ) true )					( serum.protein ( *serum.protein ) true ) 					( injury ( *injury ) true ) )	if.not.states	( ( has.edema ( *injury ) true ) ) 	then.states		( ( has.edema ( *injury ) true ) ) 	then.say	"exudation causes edema"{	c:	phagocyte.migration.I 	level		basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	JAR	context		immunology	if.actors	( ( phagocyte ( *phagocyte ) true )					( invader ( *invader ) true ) )	then.relates	( ( abuts ( *phagocyte *invader ) true ) )	then.say		"phagocyte.migration occurs"}	c:	phagocyte.diapedesis	level		basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	JAR	if.actors	( ( phagocyte ( *phagocyte ) true )					( injury ( *injury ) true )					( invader ( *invader ) true ) )	if.not.relates	( ( migrates.to ( *phagocyte *injury ) true ) )	then.relates	( ( migrates.to ( *phagocyte *injury ) true )					( abuts ( *phagocyte *invader) true )					( binds ( *phagocyte *invader) true ) )	then.say	"phagocyte migrates to site of invader"		{	c:	phagocyte.abuts.particle	level		basic	sub.of		phys.process	instance.of	process.rule popsim.rule	my.creator	JAR	context		immunology	if.actors		( ( phagocyte ( *phagocyte ) true ) 						( particle ( *particle ) true ) )	if.relates		( ( abuts ( *phagocyte *particle ) true ) )	if.not.relates		( ( binds ( *phagocyte *particle ) true ) ) 	then.relates		( ( binds ( *phagocyte *particle ) true ) ) 	then.say 		"Phagocyte binds particle"	}																									