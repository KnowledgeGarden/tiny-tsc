Notes on the Allergy Files 07981-	To run the experiment, just drag this entire folder to the folder where TSC lives, start TSC,	then INCLUDE the *Allergy.loader	2-	I took a lot of the players that you created (pollen, mast cells, etc.) and added them to my more	modular knowledge base components (Bioprimitive.t, Cell.T, Histo.T, immune.T.)  Immune.t in	in particular includes some of the components that were in the larger number of other .t files that	are in the group of files you were using.3-  Nancy wants to make sure we can run all the other previous experiments (like phagocytosis) when	the allergy work is included.  This should be possible after I clean up the code from those files	a bit.	4-	My Cell.T and other files include players and stuff for cell adhesion molecule and gene regulation	experiments, which was a major reason for me to include these updated files in your experiments.5-	Print out the Allergy.kb and Allergy.exp files and read the code carefully.  Note that the 	if.actors statements include things like ( pollen ( pollen= ) true ) where pollen= is a 	"variable token" only used to set up initial conditions.  In the KB file, the syntax for pollen	is ( pollen ( *pollen ) true ), where *pollen represents the program variable binding for the	actual process rules.  In an .exp file, I've been using bindings like pollen= and mast.cell= as	a convention:  Pollen1 or Pollen0 could just as easily be used, but NOT *pollen.  That's just	the way it works.	6-	Construct (rule) names should be kept to 18 characters or less (including - and .) and should	be unique and make some sense for convenience's sake.	7-  Relations are verb subject object phrases.  ( abuts ( *T-cell *B-cell ) ) true has the sense of	T-cell abuts [lies next to] B-cell.  This is a binary relationship:  There should only be a	single verb, subject, and object involved.  You CANNOT do something like	( abuts ( *T-cell *B-cell *mast.cell ) ) true in TSC, although it might be a valid statement	in the LISP language8-	Make sure that there are always spaces between parenthesis and other characters.  This is a	common source of typos.  For example  ( *pollen ) is good, and (*pollen ) will generate an error	at runtime.	9-  Parentheses have to be "balanced" in all rules, just like they have to be in algebraic statements.	If there are not the right number of parentheses (e.g., in an if.actors statement) when the	KB is included, the FORTH window will show an error message, and you may get a window popping	up that lists a rule name and says something like PARENS unbalanced.  Look for unbalanced	parentheses in that rule in the .KB file.		Examples  good:				if.actors		( ( human.subject ( *human.subject ) true )					  ( pollen ( *pollen ) true )					  (	mucous.membrane ( *mucous.membrane ) true ) )  	if.relates		( ( inhales ( *human.subject *pollen ) true ) ) 	if.not.relates	( (	abuts ( *pollen *mucous.membrane ) true ) ) 	then.relates	( (	abuts ( *pollen *mucous.membrane ) true ) ) 	 	 			BAD	if.actors		( ( human.subject ( *human.subject ) true )					  ( pollen ( *pollen ) true )					  (	mucous.membrane ( *mucous.membrane ) true )  <final paren missing  	if.relates		( ( inhales ( *human.subject * pollen ) true ) ) < space between * and pollen 	if.not.relates	( (	abuts ( *pollen *mucous.membrane  true ) )   < paren missing before true 	then.relates	( (	abuts ( *pollen *mucous.membrane ) true ) ) 	10-	Read allergy.kb carefully.  It is pretty straightforward, and should make sense.	In the following example, the if.not.relates statement is there to make sure the rule fires ONLY	once.  You will see a lot of this in my KBs.  Otherwise, this rule could keep firing every cycle.	Think about it for a while:  it should make sense.  This stuff is logical to an extreme!		...	if.relates		( ( inhales ( *human.subject *pollen ) true ) ) 	if.not.relates	( (	abuts ( *pollen *mucous.membrane ) true ) ) 	then.relates	( (	abuts ( *pollen *mucous.membrane ) true ) ) 	then.say 		" Human subject inhales pollen, and pollen contacts respiratory mucous membrane"			 	11- If you have any questions, you can email me at trelease@ucla.edu.  It is probably most easy to	cut-and-paste some code text into your email if it's causing you problems, so I can explain it	12-	Good luck.  This is unusual work for life sciences! 	