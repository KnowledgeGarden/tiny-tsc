{	PopSim.KBdescription:	TSC behaviors for running and studying PopSim simulations.need to do:		Add ability to interrogate PopSim Server experiment status					eg.  no-experiment, in-progress, complete, no-response, etc.				Don't spawn new study tasks unless in-progress.to improve:		xproblems:		xreference:		xfile created:		07/11/92file based on:	xglobal variables used here:CHANGES:	07/11/92	first cut: NewCentury 12point, TabStops=4, LineWrap=100.}{\ This is a typical example of an agendatask frame used to study results of  a PopSim simulation.\ It matches a rule to study the ca.results slot of an experiment frame.\  For an example, see STUDY.CA.1 defined below.\ This frame is normally defined in the same file as the experiment frame it refers to, or it is created\ dynamically in a behavior rule.\ If the ca.results slot is empty then a sub-task will be created to fill it with simulation data.c:	TASK.xxx.1	instance.of		agendatask	topic			data.exploration	do.task			study	on.concept		xxx		\ the frame describing a simulation experiment.	on.slot			ca.results	\ the data slot filled by running the simulation	params		new.data	priority		850	my.sources		jp2	reasons		( focus.of.attention )}\ _____________________________________________________BEHAVIOR RULE CLAUSE SUPPORT\ =============================={	FIRE.UP.CA	description:		Translate experiment and rules and initiate PopSim simulation	example input:		r&f	example output:	x	notes:				x}: FIRE.UP.CA  ( symbol -- tf )   ca ;c:	FIRE.UP.CA	sub.of		function	i.take		symbol	i.give		flag	forth		%fire.up.ca\ =============================={	DO.STUDY.CA	description:		A stub for routine to study result data from a PopSim simulation.	example input:		r&f	example output:	x	notes:				x}: DO.STUDY.CA  ( symbol -- )	debug> ." DO.STUDY.CA " cr <debug	\ dup '' ca.results nil pput	drop	;c:	DO.STUDY.CA	sub.of		function	i.take		symbol	i.give		none	forth		%do.study.ca\ =============================={	DATA.DONE?	description:		Check to see if all result data has arrived from PopSim Server.	example input:		r&f	example output:	x	notes:				x}c:	DATA.DONE?	sub.of		predicate	i.take		symbol	i.give		flag	arguments	*con	my.vars	*its  *two *len	algorithm	( do ( display> "data.done" debug ) ( display *con debug )			( bindq *its ( select 'ca.iterations from *con ) )			( bindq *two 2 )			( display> "data.done.length" debug )			( bindq *len ( length ( get *con 'ca.results ) ) )			( display> "data.done.equal" debug )			( display ( get *con 'ca.results ) debug )			( return ( equal? ( plus *two ( quotient ( first *its ) ( second *its ) ) ) *len ) )				)\ =============================={	THEN.RUN.CA.1	description:		fireup a CA experiment	example input:		x	example output:	x	notes:				*con is the experiment frame to get stuff from and put stuff to						first get all the "knobs" and set various parameters				 then setup the ca system to send out a startup thingy				 if *params = nil				 then issue a new task to watch for incoming data					( make.new.task						'data.exploration						'fillin				\ do-task						*con				\ on concept						'ca.results			\ slot						'new.data			\ parameter						800						( @cur.rule )						'( new.data focus.of.attention ) ) ) )				if *params = new.data				then look to see if new data came in				if have enough data				then do something with it				else issue a new task}{	THEN.STUDY.CA.1	If called with the 'no.data' parameter then call fire.up.ca to translate the KB related to *con and	send the translation to the PopSim Server for execution.  Issue a task withj 'new.data' parameter	to check for result data.  Also issue a task at a lower priority to bloom an envisionment based on	( value.of  *con  'initial.conditions ).	If called with the 'new.data' parameter checjk to see if all results have arrived (data.done?).  If all	data has arrived call do.study.ca to do something with it, otherwise issue another 'new.data task to	check again later.}c:	THEN.STUDY.CA.1	sub.of			information.slot	instance.of		rhs.func	slot.compile	%comp.rhs	to.get		%pget	to.put		%pput	legal.for	compute.process	my.creator	jp2	i.take		symbol list	i.give		none	arguments	*con *params	algorithm	( do			( display> "THEN.STUDY.CA.1" debug )			( display *con debug ) ( display *params debug )			( display> "THEN.STUDY.CA.1" log ) ( display *con log ) ( display *params log )			( cond	( ( same? ( first ( first  *params ) )  'no.data )				   (do	( cond	( ( NULL? ( get *con 'ca.results ) )						  ( cond	( ( fire.up.ca *con )							  ( make.new.task							           	'data.exploration								'study *con		\ on concept								'ca.results	\ slot								'( new.data )	\ parameter								850								( @cur.rule )								'( new.data focus.of.attention ) ) )							( T nil ) ) )						( T nil ) )					( make.new.task					             'data.exploration						'fillin				\ do-task						( value.of  *con  'initial.conditions ) \ on concept						'next.episode			\ slot						'( new.data )			\ parameter						800						( @cur.rule )						'( new.data focus.of.attention ) ) ) )			\	( ( same? ( first ( first  *params ) ) 'new.data )			\	  (  do	( display> "current.data" log )			\		( display ( get *con 'ca.results ) log )			\		( cond	( ( data.done? *con )			\			  ( do.study.ca *con ) )			\			( T  ( make.new.task			\			             'data.exploration			\				'study			\ do-task			\				*con			\ on concept			\				'ca.results		\ slot			\				'( new.data )		\ parameter			\				850			\				( @cur.rule )			\				'( new.data focus.of.attention ) ) ) ) ) )				( T nil  ) ) )\ ______________________________________________________________________ BEHAVIOR RULES\ =============================={	STUDY.CA.1	description:		first cut PopSim trial	example input:		x	example output:	x	notes:			Study results from PopSim simulation.  Run simulation if no results are present.}c:	STUDY.CA.1	instance.of					behavior.rule	level						basic	sub.of						compute.process	my.creator					dhf	if.task=						study	if.concept=					*con	if.slot=						ca.results	if.params					*params		\ &&&& may blow us	then.study.ca.1				*con *params	attach.to					study