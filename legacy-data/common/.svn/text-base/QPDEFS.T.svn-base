{	QPDEFS.Tdescription:	xneed to do:		xto improve:		xPROBLEMS:	xnotes:			x=== PLEASE FORMAT this doc with NewCentury Font, tab stops 4, 12 pt, Margin 100, Reduced 73 %.=== ANNOTATION: #### = HACK, ???? = QUESTION, **** = UNTESTED, $$$$ = TO-DO, &&&& = NOTECHANGES:	950417	jp2:	updates	}{	mostly, this is a file of relations experienced in a qualitative physics kb	most of these relations will be slots in QP knowledge basesCOMP.LEGAL/TAX	checks if new concept is legal for a relation to another concept						checks to see if the slot value is legal						compiles this concept to inverse slot of slot value (by UNION)COMP.INSTANCE	compiles this concept to inverse slot of slot value (by UNION)		looks to see if this concept is instance of something which has		compile-time behaviors to executemGet		"method" get -- basically uses any "to.get" method compiled for a slot					if you want to take advantage of different slot getting methods, use this in 4th codepGet		the basic slot "get" method -- nothing fancyiGet		iGET is an instance of a getmethod callable by mGET. It either						gets the slot's value, or inherits up the SUBS/INSTANCES tree						NOTE: we can inherit up the subOf route--recursively all the way to SUPER--					but we don't deal with viewOf--Inheritance along viewOf is at risk of looping						e.g. water viewOf ice and ice viewOf water.mPut		"method" put -- like mGet, it uses put methods defined in "to.put" slotspPut		the basic slot "put" method}\ ______________________________________________________________________ SUPPORT PREDICATES\	these predicates are given a list of numbers -- data\	they return truth based on their tests of the data\ =============================={	STEADY.CURVE?	description:		x	example input:		x	example output:	x	notes:				x}c:	STEADY.CURVE?	instanceOf			flow.pred	i.take				none.bond	i.give				none.bond\ =============================={	CHANGING.CURVE?	description:		x	example input:		x	example output:	x	notes:				x}c:	CHANGING.CURVE?	instanceOf			flow.pred	disjoint.from		steady.curve?	i.take				none.bond	i.give				none.bond\ =============================={	SLOPE.CHANGE?	description:		x	example input:		x	example output:	x	notes:				x}c:	SLOPE.CHANGE?	instanceOf			flow.pred	i.take				none.bond	i.give				none.bond\ =============================={	STEP.CHANGE?	description:		x	example input:		x	example output:	x	notes:				x}c:	STEP.CHANGE?	instanceOf			flow.pred	i.take				none.bond	i.give				none.bond\ =============================={	TRANS.CHANGE?	description:		x	example input:		x	example output:	x	notes:				x}c:	TRANS.CHANGE?	instanceOf			flow.pred	i.take				none.bond	i.give				none.bond\ =============================={	OSCILLATING?	description:		x	example input:		x	example output:	x	notes:				x}c:	OSCILLATING?	instanceOf			flow.pred	i.take				none.bond	i.give				none.bond\ =============================={	INCREASING?	description:		x	example input:		x	example output:	x	notes:				x}c:	INCREASING?	instanceOf			flow.pred	i.take				none.bond	i.give				none.bond\ =============================={	CONTAINS?	description:		x	example input:		x	example output:	x	notes:				x}c:	CONTAINS?	instanceOf			flow.pred	i.take				none.bond	i.give				none.bond\ ______________________________________________________________________ CHANGE / VALUES\ note similarity to HLL predicates on some of these\ ______________________________________________________________________ What's Happening\	each of these can get a "fillin examples" task, when given some data\ =============================={	STEADY	description:		x	example input:		x	example output:	x	notes:				x}c:	STEADY	subOf				relation	definition			steady.curve?\ =============================={	CHANGE	description:		x	example input:		x	example output:	x	notes:				x}c:	CHANGE	subOf				relation	definition			changing.curve?	disjoint.from		steady	\ ==============================	{	SLOPE.CHANGE			description:		x		example input:		x		example output:	x		notes:				x	}		c:	SLOPE.CHANGE		subOf				change		definition			slope.change?		\ ==============================	{	STEP.CHANGE			description:		x		example input:		x		example output:	x		notes:				x	}		c:	STEP.CHANGE		subOf				change		definition			step.change?		\ ==============================	{	TRANSIENT.CHANGE			description:		x		example input:		x		example output:	x		notes:				x	}		c:	TRANSIENT.CHANGE		subOf				change		definition			trans.change?		\ ==============================	{	OSCILLATING.CHANGE			description:		x		example input:		x		example output:	x		notes:				x	}		c:	OSCILLATING.CHANGE		subOf				change		definition			oscillating?		\ ==============================	{	INCREASING			description:		x		example input:		x		example output:	x		notes:				x	}		c:	INCREASING		subOf				change		definition			increasing?	\ e.g. accel.increase would be a viewOf increasing if we have a	\	protohistory for something (increasing) accelerating		\ ==============================	{	ACCEL.INCREASE			description:		x		example input:		x		example output:	x		notes:				x	}		c:	ACCEL.INCREASE		subOf				change		\ ==============================	{	DECEL.INCREASE			description:		x		example input:		x		example output:	x		notes:				x	}		c:	DECEL.INCREASE		subOf				change		\ ==============================	{	STEADY.INCREASE			description:		x		example input:		x		example output:	x		notes:				x	}		c:	STEADY.INCREASE		subOf				change		\ ==============================	{	DECREASING			description:		x		example input:		x		example output:	x		notes:				x	}		c:	DECREASING		subOf				change		\ ==============================	{	ACCEL.DECREASE			description:		x		example input:		x		example output:	x		notes:				x	}		c:	ACCEL.DECREASE		subOf				change		\ ==============================	{	STEADY.DECREASE			description:		x		example input:		x		example output:	x		notes:				x	}		c:	STEADY.DECREASE		subOf				change		\ ==============================	{	DECEL.DECREASE			description:		x		example input:		x		example output:	x		notes:				x	}		c:	DECEL.DECREASE		subOf				change		disjoint.from		steady.decrease accel.decrease		\ ==============================	{	OSCILLATING			description:		x		example input:		x		example output:	x		notes:				x	}		c:	OSCILLATING		subOf				change		disjoint.from		steady		\ may be same as chaotic		\ ==============================	{	STUTTERING			description:		x		example input:		x		example output:	x		notes:				x	}		c:	STUTTERING		subOf				change		disjoint.from		steady		\ ==============================	{	CHAOTIC			description:		x		example input:		x		example output:	x		notes:				x	}		c:	CHAOTIC		subOf				change		disjoint.from		steady	\ ______________________________________________________________________ How Muchc:	GREATER.THAN		\ not in basic TSC	subOf				taxonomic.slot relation	definition			greater.than?	synonym			more.than	\ already in TSC	disjoint.from		equals less.than\ =============================={	LESS.THAN	description:		x	example input:		x	example output:	x	notes:				x}c:	LESS.THAN	subOf				taxonomic.slot relation	disjoint.from		equals  greater.than	inverse.relation		greater.than	inverseSlot			greater.than	\ =============================={	EQUALS	description:		x	example input:		x	example output:	x	notes:				x}c:	EQUALS				subOf				taxonomic.slot relation	definition			equal?	disjoint.from		greater.than less.than	inverseSlot			equals\ =============================={	ACTIVE	description:		x	example input:		x	example output:	x	notes:				x}c:	ACTIVE	subOf				information.slot relationc:	INACTIVE	subOf				information.slot relation	inverse.relation		active	\ =============================={	REACTIVE	description:		x	example input:		x	example output:	x	notes:				x}c:	REACTIVE	subOf				information.slot relation	c:	INERT	subOf				information.slot	relation	inverse.relation		reactive\ ______________________________________________________________________ How it's Happening\ =============================={	NOT.accelerating	description:		x	example input:		x	example output:	x	notes:				x}c:	NOT.accelerating	subOf				relation	\ =============================={	DECELERATING	description:		x	example input:		x	example output:	x	notes:				x}c:	DECELERATING	subOf				relation 	disjoint.from		not.accelerating\ =============================={	accelerating	description:		x	example input:		x	example output:	x	notes:				x}c:	accelerating	subOf				relation	inverse.relation		decelerating not.accelerating	\ this one.group is for sensors\ =============================={	MEASURES	description:		x	example input:		x	example output:	x	notes:				x}c:	MEASURES	subOf				taxonomic.slot relation	inverseSlot			measured.by\ this one.group collects sensors\ =============================={	MEASURED.BY	description:		x	example input:		x	example output:	x	notes:				x}c:	MEASURED.BY	subOf				taxonomic.slot relation	inverseSlot			measures\ this one.group is for databases\ =============================={	MEASURE.OF	description:		x	example input:		x	example output:	x	notes:				x}c:	MEASURE.OF	subOf				taxonomic.slot relation	inverseSlot			measured.in	\ this one.group collects database examples\ =============================={	MEASURED.IN	description:		x	example input:		x	example output:	x	notes:				x}c:	MEASURED.IN	subOf				taxonomic.slot relation	inverseSlot			measure.of\ =============================={	CAUSES	description:		x	example input:		x	example output:	x	notes:				x}c:	CAUSES	subOf				taxonomic.slot relation	inverseSlot			caused.by\ =============================={	CAUSED.BY	description:		x	example input:		x	example output:	x	notes:				x}c:	CAUSED.BY	subOf				taxonomic.slot relation	inverseSlot			causes\ =============================={	QUAL.INCREASE	description:		x	example input:		x	example output:	x	notes:				x}c:	QUAL.INCREASE	subOf				relation\ =============================={	QUAL.DECREASE	description:		x	example input:		x	example output:	x	notes:				x}c:	QUAL.DECREASE	subOf				relation\ =============================={	QUAL.STEADY	description:		x	example input:		x	example output:	x	notes:				x}c:	QUAL.STEADY	subOf				relation\ =============================={	QUAN.INCREASE	description:		x	example input:		x	example output:	x	notes:				x}c:	QUAN.INCREASE	subOf				relation\ =============================={	QUAN.DECREASE	description:		x	example input:		x	example output:	x	notes:				x}c:	QUAN.DECREASE	subOf				relation\ =============================={	QUAN.STEADY	description:		x	example input:		x	example output:	x	notes:				x}c:	QUAN.STEADY	subOf				relation\ =============================={	QUAN.PERIODIC	description:		x	example input:		x	example output:	x	notes:				x}c:	QUAN.PERIODIC	subOf				relation\ =============================={	QUAN.CHAOTIC	description:		x	example input:		x	example output:	x	notes:				x}c:	QUAN.CHAOTIC	subOf				relation\ ____________________________________________________________ Verbs follow\ =============================={	INCREASE	description:		x	example input:		x	example output:	x	notes:				x}c:	INCREASE\ =============================={	DECREASE	description:		x	example input:		x	example output:	x	notes:				x}c:	DECREASE\ probably should be "hold" or "hold.same" or somesuch\ =============================={	SAME	description:		x	example input:		x	example output:	x	notes:				x}c:	SAME\ ______________________________________________________________________ STRUCTURAL\ collects the individual compone.bondnts of an entity\ =============================={	hasParts	description:		x	example input:		x	example output:	x	notes:				x}c:	hasParts	subOf				taxonomic.slot relation	inverseSlot			partOf		\ =============================={	partOf	description:		x	example input:		x	example output:	x	notes:				x}c:	partOf	subOf				taxonomic.slot relation	inverseSlot			hasParts\ =============================={	HAS.STRUCTURE	description:		x	example input:		x	example output:	x	notes:				x}c:	HAS.STRUCTURE	subOf				taxonomic.slot relation	to.get				%iget	inverseSlot			structure.of\ =============================={	STRUCTURE.OF	description:		x	example input:		x	example output:	x	notes:				x}c:	STRUCTURE.OF	subOf				taxonomic.slot relation	inverseSlot			has.structure	to.get				%iget\ =============================={	SUSPENDED.IN	description:		x	example input:		x	example output:	x	notes:				watch this **** chemical or mechanical suspension}c:	SUSPENDED.IN	subOf				taxonomic.slot relation\ =============================={	SUSPENDS	description:		x	example input:		x	example output:	x	notes:				needs compiler}c:	SUSPENDS	subOf				taxonomic.slot relation	inverseSlot			suspended.in\ =============================={	CONNECTED	description:		x	example input:		x	example output:	x	notes:				x}c:	CONNECTED.TO	subOf				taxonomic.slot relation	inverseSlot			connected.to\ =============================={	ATTACHED.TO	description:		x	example input:		x	example output:	x	notes:				x\ there are several possible kinds of attachment: intracellular, extracellular, nuclear, ribosomal, etc}c:	ATTACHED.TO	subOf				taxonomic.slot relation	synonym			connected	inverseSlot			attachedTo\ =============================={	NOT.ATTACHED.TO	description:		x	example input:		x	example output:	x	notes:				x}c:	NOT.ATTACHED.TO	subOf				taxonomic.slot relation	disjoint.from		attachedTo connected	inverseSlot			not.attachedTo\ =============================={	DISCONNECTED.FROM	description:		x	example input:		wing fuselage	example output:	x	notes:				x\ disconnected is different from not.connected\	not.attachedTo (not.connected) doesn't require a processes\	but disconnected implies something broke a connection}c:	DISCONNECTED.FROM	subOf				taxonomic.slot relation	disjoint.from		connected attachedTo	synonym			not.attachedTo	inverseSlot			disconnected.from	c:	DISCONNECTED		\ refers to a single argument	subOf				relation	disjoint.from		connected\ ______________________________________________________________________ SPATIAL\ =============================={	SPATIAL.LOCATION	description:		x	example input:		x	example output:	x	notes:				x}c:	SPATIAL.LOCATION	subOf				relation	to.get				%iget\	legal.for			individual.object\ =============================={	ABUTS	description:		x	example input:		x	example output:	x	notes:				x}c:	ABUTS	subOf				taxonomic.slot relation	inverseSlot			abuts\ =============================={	CONTAINS	description:		containment, where you can imagine *X as a container	example input:		( contains ( *x *y ) true )	example output:	x	notes:				x}c:	CONTAINS	subOf				taxonomic.slot relation	definition			contains?\ =============================={	CONTAINED.IN	description:		x	example input:		x	example output:	x	notes:				x}c:	CONTAINED.IN	subOf				taxonomic.slot relation	inverseSlot			contains\ ____________________________________________________________ There will be lots of these...c:	HAS.ON	subOf				taxonomic.slot relation	\ =============================={	LOCATED.ON	description:		x	example input:		x	example output:	x	notes:				x}c:	LOCATED.ON	subOf				taxonomic.slot relation	inverseSlot			has.on	c:	LOCATED.ABOVE	subOf				taxonomic.slot relation\ =============================={	LOCATED.BESIDE	description:		x	example input:		x	example output:	x	notes:				x}c:	LOCATED.BESIDE	subOf				taxonomic.slot relation	inverseSlot			located.beside\ =============================={	LOCATED.BELOW	description:		x	example input:		x	example output:	x	notes:				x}c:	LOCATED.BELOW	subOf				taxonomic.slot relation	inverseSlot			located.above	\ =============================={	LOCATED.BEHIND	description:		x	example input:		x	example output:	x	notes:				x}c:	LOCATED.BEHIND	subOf				taxonomic.slot relation\ =============================={	LOCATED.IN.FRONT	description:		x	example input:		x	example output:	x	notes:				x}c:	LOCATED.IN.FRONT	subOf				taxonomic.slot relation	inverseSlot			located.behind\ ______________________________________________________________________ TEMPORAL\ ______________________________________________________________________ Time Scales\ =============================={	GEOLOGICAL.TIME	description:		x	example input:		x	example output:	x	notes:				x}c:	GEOLOGICAL.TIME	subOf				relation	values				epoch	legal.value.of		time.scale\ =============================={	ATOMIC.TIME	description:		x	example input:		x	example output:	x	notes:				x}c:	ATOMIC.TIME	subOf				relation	values				nano.second	legal.value.of		time.scale\ =============================={	MOLECULAR.TIME	description:		x	example input:		x	example output:	x	notes:				x}c:	MOLECULAR.TIME	subOf				relation	legal.value.of		time.scale	values				microsecond millisecond second minute hour day\ =============================={	human.TIME	description:		x	example input:		x	example output:	x	notes:				x}c:	human.TIME	subOf				relation	values			day week month year	legal.value.of	time.scale\ =============================={	TEMPORAL.LOCATION	description:		x	example input:		x	example output:	x	notes:				x}c:	TEMPORAL.LOCATION	subOf				relation	to.get				%iget\	legal.for			individual.object\ =============================={	TIMING	description:		x	example input:		x	example output:	x	notes:				x}c:	TIMING	subOf				relation\ =============================={	STARTS.BEFORE	description:		x	example input:		x	example output:	x	notes:				x}\ ____________________________________________________________ There will be lots of these...c:	STARTS.BEFORE	subOf				taxonomic.slot relation\ =============================={	STARTS.DURING	description:		x	example input:		x	example output:	x	notes:				x}c:	STARTS.DURING	subOf				relationc:	STARTS.AFTER.	subOf				taxonomic.slot relation	inverseSlot			starts.before\ =============================={	STARTS.AFTER.END	description:		x	example input:		x	example output:	x	notes:				x}c:	STARTS.AFTER.END	subOf				taxonomic.slot relation\ =============================={	ENDS.AFTER.END	description:		x	example input:		x	example output:	x	notes:				x}c:	ENDS.AFTER.END	subOf				relation\ =============================={	ENDS.BEFORE	description:		x	example input:		x	example output:	x	notes:				x}c:	ENDS.BEFORE	subOf				taxonomic.slot relation	inverseSlot			starts.after.end\ =============================={	ENDS.DURING	description:		x	example input:		x	example output:	x	notes:				x}c:	ENDS.DURING	subOf				relation\ ______________________________________________________________________ When it's Happening\ =============================={	BEFORE	description:		x	example input:		x	example output:	x	notes:				x}c:	BEFORE	subOf				relation	legal.value.of		temporal.location	inverse.relation		after	definition			before?\ =============================={	LONG.BEFORE	description:		x	example input:		x	example output:	x	notes:				x}c:	LONG.BEFORE	subOf				relation	legal.value.of		temporal.location\ =============================={	AFTER	description:		x	example input:		x	example output:	x	notes:				x}c:	AFTER	subOf				relation	inverse.relation		before	legal.value.of		temporal.location	definition			after?\ =============================={	LONG.AFTER	description:		x	example input:		x	example output:	x	notes:				x}c:	LONG.AFTER	subOf				relation	inverse.relation		long.before	legal.value.of		temporal.location\ =============================={	DURING	description:		x	example input:		x	example output:	x	notes:				x}c:	WHILE	subOf				relationc:	DURING	subOf				relation	synonym			while	legal.value.of		temporal.location\ ______________________________________________________________________ MIScellANEOUS