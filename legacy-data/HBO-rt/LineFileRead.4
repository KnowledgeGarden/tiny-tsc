{	LineFileRead.4DESCRIPTION:	Support for reading lines from text filesneed to do:		xto improve:		xPROBLEMS:		xreference:		xfile created:	~6/01/92	djwfile based on:	xCHANGES:6/04/92		jp2: just about working}\ ____________________________________________________________ FILE STUFFcomment:This makes use of the following Forth functions:external: fopen   ( result[refnum] vrefnum dirid pstr -- refnum )external: fread   ( addr ct refnum -- )external: fwrite  ( addr ct refnum -- )external: fclose  ( refnum -- )external: fcreate ( pstr vrefnum dirid creator type -- )external: fcreateopen				  ( result[refnum] pstr vrefnum dirid creator type -- refnum )\unit external: freadtilcr ( result[actual] addr ct refnum -- result )	\ function freadTilCR (addr: ptr; ct: longint; refnum: longint):longint;\ uses "cat  ( startstr endstr -- ) \ append startstr to the end of endstrcomment;0 value bio-file\ create bio-buffer 256 allot		\ 1st byte is count, so it's a pstring\ =============================={	BIO-OPEN	description:		x	example input:		x	example output:		x	notes:				x}anchor	<*#cycles>	'' *#cycles to-anchor <*#cycles>anchor	<*learn>  '' *learn to-anchor <*learn>: bio-open		( symbol -- refnum )		\ given a symbol, opens file. Keep ref num.				p" Transfer:62 Aminos:" count tempstring place				+NAME@ >STR tempstring "catprint> ." Opening " tempstring count type	8 spaces ." Cycles Left " <*#cycles> eval .sx		8 spaces ." Learn Value " <*learn> eval .sx 		8 spaces ." #rules " '' observers '' my.rules pget length .<print				return		\ return value				0			\ vrefnum. 0 for "current" or given drive, -1 for main drive				0			\ dirid ... a pointer to the directory.				tempstring	\ file name... for now, we've hard-wired directory place				fopen dup				to bio-file				;\ =============================={	FILE-OPEN	description:		x	example input:		x	example output:		x	notes:				x}\ symbol1 = directory path -- e.g. ::BIO-FILES:\ symbol2 = file\: file-open		( symbol1 symbol2 -- refnum )		\ given a symbol, opens file. Keep ref num.				swap +NAME@ >STR tempstring place				+NAME@ >STR tempstring "cat				return		\ return value				0			\ vrefnum				0			\ dirid ... a pointer to the directory.				tempstring	\ file name... for now, we've hard-wired directory place				fopen				;\ =============================={	BIO-CLOSE	description:		x	example input:		x	example output:		x	notes:				x}: bio-close		bio-file fclose				;\ =============================={	FILE-CLOSE	description:		x	example input:		x	example output:		x	notes:				x}alias  FILE-CLOSE	fclose ( refnum -- )  \ ____________________________________________________________ LINE READING\ =============================={	BIO-READLINE	description:		x	example input:		x	example output:		x	notes:				x}: BIO-READLINE	( -- done? )	\ true if end of file				tempstring 255 erase				return  ( bio-buffer ) tempstring 1+ 255 bio-file freadtilcr				dup  ( bio-buffer ) tempstring c!\	debug> tempstring count type <debug				0=\	debug> ." READLINE " dup if ." EOF" then <debug				;\ =============================={	FILE-READLINE	description:		x	example input:		x	example output:		x	notes:				x}: FILE-READLINE ( refnum -- list )	\ &&&&& not done yet &&&&&				>r				return tempstring 1+ 255 r> freadtilcr				dup tempstring c!				0= 				if nil				else				then				;\ =============================={	BIO-LISTLINE	description:		turn tempstring line into a list	example input:		x	example output:		x	notes:				x}: BIO-LISTLINE ( -- list/nil )	\ turn tempstring into a list--no parens allowed in tempstring\ debug> ." LISTLINE " tempstring c@ . tempstring count type <debug				tempstring count + 1- ascii ) swap c!	\ right paren at end				tempstring c@ 1+				\ s: ct				ascii ( tempstring c!			\ now have () around string for lex-list				tempstring  swap		\ s: addr ct				dup 0= if  2drop nil exit then	\ s: addr ct				make-expression ;\ ____________________________________________________________ LINE DETECTION\ =============================={	T-HELIX?	description:		T if tempstring begins with HEL	example input:		x	example output:		x	notes:				x}: T-HELIX?	( -- tf )				tempstring 1+ c@ ascii H =				if tempstring 2 + c@ ascii E =					if tempstring 3 + c@ ascii L =					else false					then				else false				then ;\ =============================={	T-SHEET?	description:		T if tempstring begins with SHE	example input:		x	example output:		x	notes:				x}: T-SHEET?	( -- tf )				tempstring 1+ c@ ascii S =				if tempstring 2 + c@ ascii H =					if tempstring 3 + c@ ascii E =					else false					then				else false				then ;\ =============================={	T-TURN?	description:		T if tempstring begins with TUR	example input:		x	example output:		x	notes:				x}: T-TURN?	( -- tf )				tempstring 1+ c@ ascii T =				if tempstring 2 + c@ ascii U =					if tempstring 3 + c@ ascii R =					else false					then				else false				then ;\ =============================={	T-SEQRES?	description:		T if tempstring begins with SE	example input:		x	example output:		x	notes:				x}: T-SEQRES?	( -- tf )	\ can't handle blank spaces before SEQRES				tempstring 1+ c@ ascii S =				if tempstring 2 + c@ ascii E =				else false				then ;\ =============================={	T-ATOM?	description:		T if tempstring begins with AT	example input:		x	example output:		x	notes:				x}: T-ATOM?	( -- tf )				tempstring 1+ c@ ascii A =				if tempstring 2 + c@ ascii T =				else false				then ;