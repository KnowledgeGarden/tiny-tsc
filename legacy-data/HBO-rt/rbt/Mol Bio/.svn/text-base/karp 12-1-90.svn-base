Greetings PeterI've been looking closely at modifying the typical Forbus QP Theory syntax to conformmore to the notions expressed by Lenat; a rather rich vocabulary of slots with smallslot values which are easily mutated with a high potential for returning useful mutations.So, here is one of your processes which is under mutation.c:	TRANSLATION.INITIATION	instance.of				rule	sub.of					phys.process tranlation.process	if.exist.individuals		*xlinit.complex 	if.isa					( *xlinit.complex xlinit.complex )	PRECONDITIONS.M	( ( BINDV *MRNA 	(HAS.COMPONENT.R 														*XLINIT.COMPLEX  QUOTE MESSENGER.RNAS ) )		      					  ( BINDV *RIBOSOME (HAS.COMPONENT.R  								*XLINIT.COMPLEX ( QUOTE RIBOSOME ) ) ) 							  ( BINDV *RBSITE ( W/GET.VALUE 								( HAS.COMPONENT *RIBOSOME 									( QUOTE  RIBOSOME.RBS.BINDING.SITE ) ) 													( QUOTE  OBJECT.INTERACTING.WITH.SITE ) ) ) ) )	if>						( ( value.of  ( *XLINIT.COMPLEX concentration )  0e ) )	then.create				*new.mrna	then.copy.substructure	*mrna *new.mrna	then.create				*new.ribosome	then.copy.substructure	*ribosome *new.ribosome	then.create.object		( *peptide ( quote polypeptide ) )	then.create.complex	*xlelong.complex 	then.isa				( *xlelong.complex ( quote xlelong.complex))	then.irbound			( *xlelong.complex  (make.list 								( *new.mrna *new.ribosome *peptide )))	then.eval	 			( PUT.VALUE *NEW.RIBOSOME 								( QUOTE MRNA.SEGMENT.POSITION ) 									( OBJECT.COPIED.TO *RBSITE 	*NEW.MRNA ) ) ) )The frame opens some questions from me regarding the semantics of PRECONDITIONS.M,the only part I have not translated yet.  I'm unclear a bit about the semantics of HAS.COMPONENT.Rwhich, I infer from your previous mail, means -- for (has.component.r x y) -- return T if x has a componenty, or something like that.  If so, and given variables like *MRNA are global to the experiment, why bind itwith T or NIL (or F or whatever)?  Especially when a copy.structure uses the variable's binding later.Similar problem with HAS.COMPONENT, below.It appears to me that you trade bindings on a mess of global variables during an experiment.  Comments?The then.eval slot arose when I got lazy.  I just EVAL some code you had for stuffing things in slots.  Lenatwould probably specialize the ideas in the slot, say, then.set.object.copied.to ... or something like that.  Morethought needed here.If you are interested in the arguments I have for this syntax class, I'd be happy to discuss it with you.Our paper on qualitative process discovery just got published as an AF TR.  I'll send you one as soon asthey send me some.I hope turkey there was as good as turkey here.Jack Park