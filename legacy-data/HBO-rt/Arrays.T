{	Arrays.Tdescription:	Scheme routines to allocate and access 1D, 2D, 3D arrays of s-expressions.				Support routines are in Arrays.4, ArrayMgr.4.need to do:to improve:problems:notes:NewCentury 12point, TabStops=4, LineWrap=100.CHANGES:2/13/93 start	dhf:	first cut}C: MY.A.HANDLE	instance.of	information.slotC: MY.XMAX	instance.of	information.slotC: MY.YMAX	instance.of	information.slotC: MY.ZMAX	instance.of	information.slot\ Create a 1D array to hold xmax s-expressionsC: CREATE.ARRAY1	instance.of		flow.func	i.take			integer		\ xmax	i.give			symbol	forth			%create.array1\ Dispose of an array; free its handleC: DISPOSE.ARRAY1	instance.of		flow.func	i.take			symbol	\ array	i.give			none	forth			%dispose.array1\ Fetch an s-expression from location x; indices start at 0C: ARRAY1@	instance.of		flow.func	i.take			symbol integer \ array x	i.give			sx	forth			%array1@\ Store an s-expression to location x; indices start at 0C: ARRAY1!	instance.of		flow.func	i.take			symbol integer sx \ array x value	i.give			none	forth			%array1!\ Display the contents of an arrayC: DISPLAY.ARRAY	instance.of		flow.func	i.take			symbol  \ array	i.give			none	forth			%display.arrayC: DISPLAY.COLS	instance.of		flow.func	i.take			symbol list \ array	i.give			none	forth			%display.cols{ *********************** slightly (10%)  faster, but less informative; also see Arrays.4\ Create a 1D array to hold xmax s-expressionsC: CREATE.ARRAY1	instance.of		flow.func	i.take			integer		\ xmax	i.give			integer	forth			%create.array1\ Dispose of an array; free its handleC: DISPOSE.ARRAY1	instance.of		flow.func	i.take			integer	\ array	i.give			none	forth			%dispose.array1\ Fetch an s-expression from location x; indices start at 0C: ARRAY1@	instance.of		flow.func	i.take			integer integer \ array x	i.give			sx	forth			%array1@\ Store an s-expression to location x; indices start at 0C: ARRAY1!	instance.of		flow.func	i.take			integer integer sx \ array x value	i.give			none	forth			%array1!*********************** }\ Create an 2D array to hold ymax by xmax s-expressionsC: CREATE.ARRAY2	instance.of		flow.func	i.take			integer integer	\ ymax xmax	i.give			symbol	forth			%create.array2\ Dispose of an array; free its handleC: DISPOSE.ARRAY2	instance.of		flow.func	i.take			symbol	\ array	i.give			none	forth			%dispose.array2\ Fetch an s-expression from location (y,x); indices start at (0,0)C: ARRAY2@	instance.of		flow.func	i.take			symbol integer integer \ array y x	i.give			sx	forth			%array2@\ Store an s-expression to location (y,x); indices start at (0,0)C: ARRAY2!	instance.of		flow.func	i.take			symbol integer integer sx \ array y x value	i.give			none	forth			%array2!\ Create an 3D array to hold zmax by ymax by xmax s-expressionsC: CREATE.ARRAY3	instance.of		flow.func	i.take			integer integer integer	\ zmax ymax xmax	i.give			symbol	forth			%create.array3\ Dispose of an array; free its handleC: DISPOSE.ARRAY3	instance.of		flow.func	i.take			symbol	\ array	i.give			none	forth			%dispose.array3\ Fetch an s-expression from location (z,y,x); indices start at (0,0,0)C: ARRAY3@	instance.of		flow.func	i.take			symbol integer integer integer \ array z y x	i.give			sx	forth			%array3@\ Store an s-expression to location (z,y,x); indices start at (0,0,0)C: ARRAY3!	instance.of		flow.func	i.take			symbol integer integer integer sx \ array z y x value	i.give			none	forth			%array3!