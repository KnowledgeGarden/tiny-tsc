{	ImmuneCAMS.RBTdescription:		Xneed to do:		Xto improve:		X	PROBLEMS:		notes:			HISTORY:7/7/96		Startup--definition of Immune system players according to CAMs					} \ _________________________________________________________ SUPPORT OBJECTSc:	THEN.SAY	sub.of		information.slot	instance.of	rhs.func	i.take		sx	i.give		none	arguments	*something	algorithm	( display> *something say )\ ______________________________________________________________________  RULESc:	naive.Th1-cell.circulates.1	level				basic	sub.of				phys.process	instance.of			process.rule 		if.actors			( ( helper.T1-cell ( *helper.T1-cell ) true )						  ( cerebral.arterial.system ( *cerebral.arterial.system ) true )						  ( coronary.artery.system ( *coronary.artery.system ) true )						  ( lymph.node.arterioles ( *lymph.node.arterioles ) true )						  ( pancreatic.arterial.system ( *pancreatic.arterial.system ) true )						  ( splenic.arterial.system ( *splenic.arterial.system ) true ) )	if.states			( ( circulates ( *helper.T1-cell ) true )						  ( naive ( *helper.T1-cell ) true ) )	if.not.relates		( ( enters ( *helper.T1-cell *cerebral.arterial.system ) true )						  ( enters ( *helper.T1-cell *coronary.artery.system ) true )						  ( enters ( *helper.T1-cell *lymph.node.arterioles ) true )						  ( enters ( *helper.T1-cell *pancreatic.arterial.system ) true )						  ( enters ( *helper.T1-cell *splenic.arterial.system ) true )						  ( passes.through ( *helper.T1-cell *cerebral.vascular.system ) true )						  ( passes.through ( *helper.T1-cell *coronary.vascular.system ) true )						  ( passes.through ( *helper.T1-cell *lymph.node.vascular.system ) true )						  ( passes.through ( *helper.T1-cell *pancreatic.vascular.system ) true )						  ( passes.through ( *helper.T1-cell *splenic.vascular.system ) true ) )	then.relates		( ( enters ( *helper.T1-cell *cerebral.arterial.system ) true )						  ( enters ( *helper.T1-cell *coronary.artery.system ) true )						  ( enters ( *helper.T1-cell *lymph.node.arterioles ) true )						  ( enters ( *helper.T1-cell *pancreatic.arterial.system ) true )						  ( enters ( *helper.T1-cell *splenic.arterial.system ) true ) )	then.say			" Naive Th1 cell circulates freely to different organs. "			c:	naive.Th1-cell.circulates.2	level				basic	sub.of				phys.process	instance.of			process.rule 		if.actors			( ( helper.T1-cell ( *helper.T1-cell ) true )						  ( cerebral.arterial.system ( *cerebral.arterial.system ) true )						  ( coronary.artery.system ( *coronary.artery.system ) true )						  ( lymph.node.arterioles ( *lymph.node.arterioles ) true )						  ( pancreatic.arterial.system ( *pancreatic.arterial.system ) true )						  ( splenic.arterial.system ( *splenic.arterial.system ) true ) )	if.states			( ( circulates ( *helper.T1-cell ) true )						  ( naive ( *helper.T1-cell ) true ) )	if.relates			( ( enters ( *helper.T1-cell *cerebral.arterial.system ) true )						  ( enters ( *helper.T1-cell *coronary.artery.system ) true )						  ( enters ( *helper.T1-cell *lymph.node.arterioles ) true )						  ( enters ( *helper.T1-cell *pancreatic.arterial.system ) true )						  ( enters ( *helper.T1-cell *splenic.arterial.system ) true ) )	then.relates		( ( passes.through ( *helper.T1-cell *cerebral.vascular.system ) true )						  ( passes.through ( *helper.T1-cell *coronary.vascular.system ) true )						  ( passes.through ( *helper.T1-cell *lymph.node.vascular.system ) true )						  ( passes.through ( *helper.T1-cell *pancreatic.vascular.system ) true )						  ( passes.through ( *helper.T1-cell *splenic.vascular.system ) true ) 						  ( enters ( *helper.T1-cell *cerebral.arterial.system ) false )						  ( enters ( *helper.T1-cell *coronary.artery.system ) false )						  ( enters ( *helper.T1-cell *lymph.node.arterioles ) false )						  ( enters ( *helper.T1-cell *pancreatic.arterial.system ) false )						  ( enters ( *helper.T1-cell *splenic.arterial.system ) false ) )	then.say			" Naive Th1 cell passes through the vessels of different organs. "		c:	naive.Th1-cell.circulates.3	level				basic	sub.of				phys.process	instance.of			process.rule 		if.actors			( ( helper.T1-cell ( *helper.T1-cell ) true )						  ( cerebral.arterial.system ( *cerebral.arterial.system ) true )						  ( coronary.artery.system ( *coronary.artery.system ) true )						  ( lymph.node.arterioles ( *lymph.node.arterioles ) true )						  ( pancreatic.arterial.system ( *pancreatic.arterial.system ) true )						  ( splenic.arterial.system ( *splenic.arterial.system ) true ) )	if.states			( ( circulates ( *helper.T1-cell ) true )						  ( naive ( *helper.T1-cell ) true ) )	if.relates			( ( passes.through ( *helper.T1-cell *cerebral.vascular.system ) true )						  ( passes.through ( *helper.T1-cell *coronary.vascular.system ) true )						  ( passes.through ( *helper.T1-cell *lymph.node.vascular.system ) true )						  ( passes.through ( *helper.T1-cell *pancreatic.vascular.system ) true )						  ( passes.through ( *helper.T1-cell *splenic.vascular.system ) true ) )	then.relates		( ( passes.through ( *helper.T1-cell *cerebral.vascular.system ) false )						  ( passes.through ( *helper.T1-cell *coronary.vascular.system ) false )						  ( passes.through ( *helper.T1-cell *lymph.node.vascular.system ) false )						  ( passes.through ( *helper.T1-cell *pancreatic.vascular.system ) false )						  ( passes.through ( *helper.T1-cell *splenic.vascular.system ) false ) )	then.say			" Naive Th1 cell returns to central circulation. "		c:	naive.Th1-cell.binds.node.HEV	level				basic	sub.of				phys.process	instance.of			process.rule 		if.actors			( ( helper.T1-cell ( *helper.T1-cell ) true )						  ( lymph.node.arterioles ( *lymph.node.arterioles ) true )						  ( lymph.node.HEV ( *lymph.node.HEV ) true )						  ( LFA-1 ( *LFA-1 ) true )						  ( L-selectin ( *L-selectin ) true )						  ( GlyCAM-1 ( *GlyCAM-1 ) true )						  ( CD34 ( *CD34 ) true )						  ( ICAM-1 ( *ICAM-1) true ) )	if.states			( ( circulates ( *helper.T1-cell ) true )						  ( naive ( *helper.T1-cell ) true ) )	if.relates			( ( enters ( *helper.T1-cell *lymph.node.arterioles ) true )						  ( expresses ( *helper.T1-cell *LFA-1 ) true )						  ( expresses ( *helper.T1-cell *L-selectin ) true )						  ( expresses ( *lymph.node.HEV *ICAM-1 ) true )						  ( expresses ( *lymph.node.HEV *GlyCAM-1 ) true )						  ( expresses ( *lymph.node.HEV *CD34 ) true ) )	then.relates		( ( binds.to ( *LFA-1 *ICAM-1 ) true )						  ( binds.to ( *L-selectin *GlyCAM-1 ) true )						  ( binds.to ( *L-selectin *CD34 ) true )  )	then.states			( ( circulates ( *helper.T1-cell ) false ) )	then.say			" Naive Th1 cell CAMS bind to lymph node HEV ligands. "		c:	naive.Th1-cell.diapedesis.1	level				basic	sub.of				phys.process	instance.of			process.rule 		if.actors			( ( helper.T1-cell ( *helper.T1-cell ) true )						  ( lymph.node ( *lymph.node ) true )						  ( LFA-1 ( *LFA-1 ) true )						  ( L-selectin ( *L-selectin ) true )						  ( GlyCAM-1 ( *GlyCAM-1 ) true )						  ( CD34 ( *CD34 ) true )						  ( ICAM-1 ( *ICAM-1) true ) )	if.relates			( ( binds.to ( *LFA-1 *ICAM-1 ) true )						  ( binds.to ( *L-selectin *GlyCAM-1 ) true )						  ( binds.to ( *L-selectin *CD34 ) true )  )	then.relates		( ( migrates.into ( *helper.T1-cell *lymph.node ) true )						  ( located.in ( *helper.T1-cell *lymph.node ) true ) )	then.states			( ( binds.to ( *LFA-1 *ICAM-1 ) false )						  ( binds.to ( *L-selectin *GlyCAM-1 ) false )						  ( binds.to ( *L-selectin *CD34 ) false ) )	then.say 			" Diapedesis of naive Th1 cell occurs. "		c:	naive.Th1-cell.binds.APC	level				basic	sub.of				phys.process	instance.of			process.rule 		if.actors			( ( helper.T1-cell ( *helper.T1-cell ) true )						  ( lymph.node ( *lymph.node ) true )						  ( macrophage ( *macrophage ) true )				 		  ( antigen ( *antigen ) true ) )	if.relates	        ( ( located.in ( *helper.T1-cell *lymph.node ) true ) 				          ( presents ( *macrophage *antigen ) true ) )	then.relates		( ( binds.to ( *helper.T1-cell *macrophage ) true ) )	then.states			( ( activated ( *helper.T1-cell ) true ) )	then.say			" Macrophage activates Th1 cell. "	c:	BACTERIAL.ANTIGEN.PRODUCTION.1	level				basic	sub.of				phys.process	instance.of			process.rule  	my.creator			rbt	context				human.immunology	if.actors			( ( bacterium ( *bacterium ) true ) )	if.not.actors		( ( antigen ( *antigen ) true ) )	then.create			( *antigen )	then.actors			( ( antigen ( *antigen ) true ) )	then.relates		( ( excretes ( *bacterium *antigen ) true ) )	then.say			" Bacterium excretes antigen. "	c:	macroph.antigen.binding.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				human.immunology	if.actors			( ( antigen ( *antigen ) true )						  ( lymph.node ( *lymph.node ) true )			 		 	  ( macrophage ( *macrophage ) true ) )	if.relates			( ( located.in ( *macrophage *lymph.node ) true ) )	if.not.relates		( ( binds ( *macrophage *antigen ) true ) )	then.relates		( ( binds ( *macrophage *antigen ) true ) )	then.say			" Antigen bound to macrophage in lymph node. " c:	antigen.internalization.m	level				basic	sub.of				phys.process	instance.of			process.rule  	my.creator			rbt 	context				human.immunology	if.actors			( ( antigen ( *antigen ) true )						  ( lymph.node ( *lymph.node ) true )			 		 	  ( macrophage ( *macrophage ) true ) )	if.relates			( ( binds ( *macrophage *antigen ) true ) )	if.not.relates		( ( contains ( *macrophage *antigen ) true ) )	then.relates 		( ( contains ( *macrophage *antigen ) true ) )	then.say			" Macrophage ingests bound antigen. "c:	antigen.processing.m	level				basic	sub.of				phys.process	instance.of			process.rule  	my.creator			rbt	context				human.immunology	if.actors			( ( antigen ( *antigen ) true )				  		  ( Macrophage ( *macrophage ) true ) )	if.relates			( ( contains ( *macrophage *antigen ) true ) )	if.not.relates		( ( digests ( *macrophage *antigen ) true ) )	then.relates 		( ( digests ( *macrophage *antigen ) true ) )	then.say			" Macrophage processes internalized antigen. "c:	antigen.presentation.m	level				basic	sub.of				phys.process	instance.of			process.rule  	my.creator			rbt	context				human.immunology	if.actors			( ( macrophage ( *macrophage ) true )				 		  ( antigen ( *antigen ) true ) )	if.relates			( ( digests ( *macrophage *antigen ) true ) )	if.not.relates		( ( presents ( *macrophage *antigen ) true ) )	then.relates 		( ( presents ( *macrophage *antigen ) true ) ) 	then.say			" Macrophage presents processed antigen. "		comment:c:	ACTIVATED.HELPER.T-CELL.B-CELL.ABUT.1	level		basic	sub.of		phys.process	instance.of	process.rule  	my.creator	jp2 rbt	context		human.immunology	if.actors		( ( B-cell ( *B-cell ) true )				 ( act.h.t-cell ( *act.h.t-cell ) true ) )	\ if.relates	( ( abuts ( *B-cell *act.h.t-cell ) false ) )   \ jp2	if.not.relates ( ( abuts ( *b-cell *act.h.t-cell ) true ) )	then.relates 	( ( abuts ( *B-cell *act.h.t-cell ) true ) ) 	then.say		" B-cell abuts activated helper T-cell. "c:	ACTIVATED.HELPER.T-CELL.ANTIGEN.B-CELL.BINDING.1	level		basic	sub.of		phys.process 	instance.of	process.rule   \ rbt SENSE.RULE \ jp2	my.creator	jp2 rbt	context		human.immunology	if.actors		( ( B-cell ( *B-cell ) true )				  ( ANTIGEN ( *ANTIGEN ) TRUE )	\ jp2 missing actor				 ( act.h.t-cell ( *act.h.t-cell ) true ) )	if.relates		(  ( presents ( *b-cell *antigen ) true )				  ( abuts ( *B-cell *act.h.t-cell ) true ) )	if.not.relates  ( ( ANTIGEN.BINDS ( *act.h.t-cell *B-CELL ) false ) ) 	then.relates 	( ( ANTIGEN.BINDS ( *act.h.t-cell *B-CELL ) true ) )\	THEN.ACTORS	( ( B.AB.T-CELL ( *B-CELL ) true ) )			\ jp2	then.say		" Activated helper T-cell binds B-cell bound antigen."	\ ____________________________________________________________ TRANSPORT PROCESSES\ made these rules one-shot by testing for false relation on primary output relation\ rbt 1/11/93\ modified to use the if.not.relates method--jp2 3/02/93c:	ANTIGEN.INTERNALIZATION.B	level		basic	sub.of		phys.process	instance.of	process.rule  	my.creator	rbt 	context		human.immunology	if.actors		( ( antigen ( *antigen ) true )			 	 ( b-cell ( *b-cell ) true ) )	if.relates		( ( binds ( *b-cell *antigen ) true ) )	if.not.relates	( ( contains ( *b-cell *antigen ) true ) ) 	then.relates	( ( contains ( *b-cell *antigen ) true ) )	then.say		" B-cell ingests bound antigen. "c:	ANTIGEN.PRESENTATION.B	level		basic	sub.of		phys.process	instance.of	process.rule  	my.creator	rbt	context		human.immunology	if.actors		( ( b-cell ( *b-cell ) true )				   ( antigen ( *antigen ) true ) )	if.relates		( ( digests ( *b-cell *antigen ) true ) )	if.not.relates	( ( presents ( *b-cell *antigen ) true ) )	then.relates 	( ( presents ( *b-cell *antigen ) true ) ) 	then.say		" B-cell presents processed antigen. "c:	V.ANTIGEN.PRESENTATION.M	level		basic	sub.of		phys.process	instance.of	process.rule  	my.creator	rbt	context		human.immunology	if.actors		( ( i.macrophage ( *i.macrophage ) true )				   ( v.antigen ( *v.antigen ) true )				   ( mMHC1 (*MHC1 ) true ) 				   ( virus ( *virus ) true ) )							   	if.relates		( ( infects ( *virus *i.macrophage ) true )				  ( binds ( *MHC1 *v.antigen ) true )  )	if.not.relates	( ( presents ( *i.macrophage *v.antigen ) true ) )		  				  				    	then.relates 	( ( presents ( *i.macrophage *v.antigen ) true ) ) 	then.say		" Infected macrophage presents viral antigen/peptide. "	\ ____________________________________________________________ METABOLIC PROCESSESc:	MACROPHAGE.MHC1.BINDING	level		basic	sub.of		phys.process	instance.of	process.rule   	my.creator	rbt	context		human.immunology	if.actors		( ( i.macrophage ( *i.macrophage ) true )				   ( v.antigen ( *v.antigen ) true ) 				   ( virus ( *virus ) true ) )							   	if.relates		( ( infects ( *virus *i.macrophage ) true )  )	if.not.relates	( ( binds ( *MHC1 *v.antigen ) true ) )	then.create	( *mMHC1 )	then.actors	( ( mMHC1 (*MHC1 ) true ) )	then.relates	( ( binds ( *MHC1 *v.antigen ) true ) )	then.say		" Macrophage MHC1 binds viral antigen/peptide. "c:	ANTIGEN.PROCESSING.B	level		basic	sub.of		phys.process	instance.of	process.rule  	my.creator	rbt	context		human.immunology	if.actors		( ( B-cell ( *b-cell ) true )				   ( antigen ( *antigen ) true ) )	if.relates		( ( contains ( *b-cell *antigen ) true ) )	if.not.relates	( ( digests ( *b-cell *antigen ) true ) )	\ make this rule one-shot	then.relates 	( ( digests ( *b-cell *antigen ) true ) ) 	then.say		" B-cell digests antigen. "	\ what about proliferation???  what does PROLIFERATES mean?\c:	HELPER.T-CELL.ACTIVATION.1	level		basic	sub.of		phys.process	instance.of	process.rule   \ SENSE.RULE	my.creator	jp2 rbt	context		human.immunology	if.actors		( ( antigen ( *antigen ) true )			  	 ( helper.T-cell ( *helper.T-cell ) true )				\ ( act.h.t-cell ( *act.h.t-cell ) false )	-- no "false" actors				 ( IL-1 ( *IL-1 ) true ) )	if.relates		( ( binds ( *helper.T-cell *antigen ) true ) )	if.not.actors	( ( act.h.t-cell ( *act.h.t-cell ) true ) )	then.create	( *act.h.t-cell )	then.relates 	( ( proliferates ( *helper.T-cell ) true ) )		then.actors	( ( act.h.t-cell ( *act.h.t-cell ) true ) )	then.say		" *Helper T-cell activated. "		\	New rule for cytotoxic T-cell activationc:	C.T-CELL.ACTIVATION.1	level		basic	sub.of		phys.process	instance.of	process.rule  	my.creator	rbt	context		human.immunology	if.actors		( ( v.antigen ( *v.antigen ) true )			  	 ( c.T-cell ( *c.T-cell ) true )				 ( virus ( *virus ) true )				 ( i.macrophage ( *i.macrophage ) true )				  ( mMHC1 (*MHC1 ) true ) )	if.not.actors	( ( act.c.t-cell ( *act.c.t-cell ) true ) )				  	if.relates		( ( presents ( *i.macrophage *v.antigen ) true ) ) 	then.create	( *act.c.t-cell )	then.actors	( ( act.c.t-cell ( *act.c.t-cell ) true ) )		then.say		" *Cytotoxic T-cell activated. "			   	c:	B-CELL.ACTIVATION.1	level		basic	sub.of		phys.process	instance.of	process.rule   \ SENSE.RULE			\ NOTE new syntax here	my.creator	jp2 rbt	context		human.immunology	if.actors		( ( B-cell ( *B-cell ) true )				  ( act.h.t-cell ( *act.h.t-cell ) true ) )	if.relates		( ( ANTIGEN.BINDS ( *act.h.t-cell *B-CELL ) true ) )	if.not.actors	( ( activated.b-cell ( *b-cell ) true ) )	then.actors	( ( activated.B-cell ( *B-cell ) true ) )			then.say		" B-cell activated. "	   c:	B-CELL.CYTOKINE.RECEPTOR.PRODUCTION.1	level		basic	sub.of		phys.process	instance.of	process.rule  	my.creator	jp2 rbt	context		human.immunology	if.actors		( ( activated.B-cell ( *B-cell ) true )				 \ ( cytokine.receptor  ( *cytokine.receptor ) false )  -- no "false" actors				  ( IL-1 ( *IL-1 ) true ) )	if.not.actors	( ( cytokine.receptor  ( *cytokine.receptor ) true ) )	\ prevent refiring	then.create	( *cytokine.receptor )	then.actors	( ( cytokine.receptor  ( *cytokine.receptor ) true ) )			then.relates	( ( synthesizes ( *B-cell *cytokine.receptor ) true ) 			 	  ( attaches.to (  *IL-1 *cytokine.receptor ) true ) )	then.say		" B-cell synthesizes cytokine receptor, and IL-1 attaches to receptor. "	   \ ATTACHES.TO  & BINDS seem to be very similar usage here--compare to SRL's LINKS\	ATTACHES.TO should probably be ATTACHED.TO\ ____________________________________________________________ PROLIFERATION PROCESSESc:	BLAST.CELL.PRODUCTION.1	level		basic	sub.of		phys.process	instance.of	process.rule   \ SENSE.RULE	my.creator	jp2 rbt	context		human.immunology	if.actors		( ( activated.B-cell ( *B-cell ) true )				   ( IL-1 ( *IL-1) true )				   ( cytokine.receptor ( *cytokine.receptor ) true ) 				   \  ( blast.cell ( *blast.cell ) false ) 				    )	if.relates		( ( synthesizes ( *B-cell *cytokine.receptor ) true ) 			  	 ( attaches.to ( *IL-1 *cytokine.receptor ) true ) )	if.not.actors	( ( blast.cell ( *blast.cell ) true ) )	then.create	( *blast.cell )	then.actors	( ( blast.cell ( *blast.cell ) true ) )	then.say		" Blast cell produced. "	c:	PLASMA.MEMORY.CELL.PRODUCTION.1	level		basic	sub.of		phys.process	instance.of	process.rule  	my.creator	jp2 rbt	context		human.immunology	if.actors		( (  blast.cell ( *blast.cell ) true ) 				   ( IL-1 ( *IL-1 ) true )				  \ ( plasma.cell ( *plasma.cell ) false )			   	   \ ( memory.cell ( *memory.cell ) false )			   	   )	if.not.actors	( ( plasma.cell ( *plasma.cell ) true )			   		  ( memory.cell ( *memory.cell ) true ) )	then.create	( *plasma.cell *memory.cell )	then.actors	( ( plasma.cell ( *plasma.cell ) true )				  ( memory.cell ( *memory.cell ) true ) )	then.say		" Plasma cell produced.  Memory cell produced. "			   	  		\ __________________________________________________ANTIBODY PRODUCTIONc:	ANTIBODY.PRODUCTION.1	level		basic	sub.of		phys.process	instance.of	process.rule   \ SENSE.RULE	my.creator	rbt	context		human.immunology	if.actors		( ( IL-1 ( *IL-1 ) true )			   	( cytokine.receptor ( *cytokine.receptor ) true )			   	( plasma.cell ( *plasma.cell ) true ) )	if.relates		( ( attaches.to ( *IL-1 *cytokine.receptor ) true ) )	if.not.actors	( ( antibody ( *antibody ) true ) )	then.create	( *antibody )	then.actors	( ( antibody ( *antibody ) true ) )	then.say		" Plasma cell produces antibody. "			    \ ___________________________________________________INFECTIOUS AGENT PROCESSEScomment:	this rule has a problem with the "no false actors" syntax rule:		without antigen as actor, you cannot use the "excretes" relation here to limit firing	that is: we need some sort of unary relation for virus which will get changed on firing	I choose--for purposes of trials--"excited"	note that this has been added to initial conditions as well	second cut: i choose if.not.actors, and deleted "excited" from ICcomment;c:	VIRAL.INFECTION.M	level			basic	sub.of			phys.process	instance.of		process.rule  	my.creator		rbt	context			human.immunology	if.actors			( ( virus ( *virus ) true )					  ( macrophage ( *macrophage ) true ) )	if.not.actors		( ( v.antigen ( *v.antigen ) true )					  ( i.macrophage ( *i.macrophage ) true ) )				  	if.not.relates		( ( infects ( *virus *i.macrophage ) true ) )	then.create		 ( *v.antigen ) ( *i.macrophage ) 	then.actors		( ( v.antigen ( *v.antigen ) true )					  ( i.macrophage ( *i.macrophage ) true ) 					  ( macrophage ( *macrophage ) false ) )  \ rbt: added to make "not normal" macrophage	then.relates		( ( infects ( *virus *i.macrophage ) true ) )	then.say			" Virus infects macrophage. "	{c:	VIRAL.ANTIGEN.PRODUCTION	level		basic	sub.of		phys.process	instance.of	process.rule  	my.creator	rbt	context		human.immunology	if.actors		( ( virus ( *virus ) true ) 	if.relates		( ( excretes ( *virus *antigen ) false ) )	if.not.actors	( ( antigen ( *antigen ) true ) )	then.create	( *antigen )	then.actors	( ( antigen ( *antigen ) true ) )	then.relates	( ( excretes ( *virus *antigen ) true ) )	then.say		( Virus excretes antigen. )	}{c:	BACTERIAL.ANTIGEN.PRODUCTION.2	level		basic	sub.of		phys.process	instance.of	process.rule  	my.creator	rbt	context		human.immunology	if.actors		( ( bacterium ( *bacterium ) true ) )\	if.relates		( ( excretes ( *bacterium *bacterial.antigen ) false ) )	if.not.actors	( ( bacterial.antigen ( *bacterial.antigen ) true ) )	then.create	( *bacterial.antigen )	then.actors	( ( bacterial.antigen ( *bacterial.antigen ) true ) )	then.relates	( ( excretes ( *bacteria *bacterial.antigen ) true ) )	then.say		( Bacterium excretes bacterial antigen. )	}		\ _________________________________________ANTIBODY-PATHOGEN BINDING PROCESSES	\ next rule does not adress the fact that antigen is related--bound--to virus{c:	ANTIBODY.VIRUS.ANTIGEN.BINDING.1	level		basic	sub.of		phys.process	instance.of	process.rule   \ SENSE.RULE	my.creator	jp2 rbt	context		human.immunology	if.actors		( ( antibody ( *antibody ) true )				 ( virus ( *virus ) true ) )	if.not.relates ( ( binds ( *antibody *virus ) true ) )	\ added to make it run faster	then.relates	( ( binds ( *antibody *virus ) true ) )	then.say		" Antibody binds to virus. "}	c:	ANTIBODY.BACTERIUM.ANTIGEN.BINDING.1	level		basic	sub.of		phys.process	instance.of	process.rule   \ SENSE.RULE	my.creator	rbt	context		human.immunology	if.actors		( ( antibody ( *antibody ) true )				 ( bacterium ( *bacterium ) true ) )	if.not.relates	( ( binds ( *antibody *bacterium ) true ) )	\ added to make it run faster	then.relates	( ( binds ( *antibody *bacterium ) true ) )	then.say		" Antibody binds to bacterium. "	\ _________________________________________INFECTED CELL LYSIS\ ***A STOP RULEc:	I.MACROPHAGE.LYSIS.1	level			basic	sub.of			phys.process	instance.of		process.rule  	my.creator		rbt	context			human.immunology	if.actors			( ( v.antigen ( *v.antigen ) true )				 	  ( virus ( *virus ) true )				 	  ( i.macrophage ( *i.macrophage ) true )				 	  ( act.c.t-cell ( *act.c.t-cell ) true ) )	if.not.relates		( ( lyses ( *act.c.t-cell ) ( *i.macrophage ) true ) )	then.actors	( ( v.antigen ( *v.antigen ) false )				 	  ( virus ( *virus ) false ) )		   	then.relates		( ( lyses ( *act.c.t-cell ) ( *i.macrophage ) true ) )	then.terminate	expansion	then.say		" ***Cytotoxic T-cell lyses infected macrophage. "			\ ____________________________________________________________ STOPPING RULEScomment:you can write stopping rules to halt construction of the envisionmentthis is a model of such a type of rulesome stopping rules are used when a branch of the tree is known to be unproductiveothers simply stop when some goal state is reachedcomment;\ stop when macrophage ingests antibody bound virus rbt--1015{c:	VIRAL.INGESTION.STOP.1	level		basic	sub.of		phys.process	instance.of	process.rule   \ SENSE.RULE \ dropped sense.rule until QPT code patched	my.creator	rbt	context		human.immunology	if.actors		( ( antibody ( *antibody ) true )				 ( virus ( *virus ) true )				 ( macrophage ( *macrophage ) true ) )	if.relates		( ( binds ( *antibody *virus )  true ) )	if.not.relates	( ( ingests ( *macrophage *virus ) true ) )	then.actors	( ( virus ( *virus ) false ) )	\ jp2--will be killed by QPT **	then.relates	( ( ingests ( *macrophage *virus ) true)				  )			 	then.terminate	expansion	then.say		" ***Macrophage ingests antibody-bound virus. "	}\ stop when macrophage ingests anitbody-bound bacterium rbt--0918c:	BACTERIUM.INGESTION.1	level		basic	sub.of		phys.process	instance.of	SENSE.RULE   	my.creator	rbt	context		human.immunology	if.actors			( ( antibody ( *antibody ) true )					 ( bacterium ( *bacterium ) true )					 ( macrophage ( *macrophage ) true ) )	if.relates			( ( binds ( *antibody *bacterium )  true ) )	if.not.relates		( ( ingests ( *macrophage *bacterium ) true ) )	then.relates		( ( ingests ( *macrophage *bacterium ) true )  )	then.terminate	expansion		then.say		" ***Macrophage ingests antibody-bound bacterium. "	comment;	