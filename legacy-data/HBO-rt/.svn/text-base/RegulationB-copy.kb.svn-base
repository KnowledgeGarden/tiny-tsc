{RegulationB.kbdescription:	Regulation KB-  Signalling, genes, transcriptionsneed to do:		Xto improve:		XPROBLEMS:			notes:			originated by rbt requires bioprimitive.t, cell.t, histo.t, immune.t HISTORY:6/30/96			start NF-kB, AP-1 rules7/1-2			c-jun rules7/3/95			c-fos rules7/5/96			Production of cjun, cfos, Fos-Jun, and Jun-Jun dimers, ROS activation of s}\	--------------------Transcription Factor Phosphorylation Processesc:	Tyr.p.kin.IkB.phosphoryl	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( IkB-p50-p65 ( *IkB-p50-p65 )  true )						  ( IkB ( *IkB  ) true )						  ( protein.tyrosine.kinase ( *protein.tyrosine.kinase ) true ) )	if.states			( ( activated ( *protein.tyrosine.kinase ) true ) )	if.not.states		( ( phosphorylated ( *IkB ) true ) )	then.states			( ( phosphorylated ( *IkB ) true ) )	then.relates		( ( phosphorylates ( *protein.tyrosine.kinase *IkB) true ) )	then.say			" Tyrosine protein kinase phosphorylates IkB bound to p50-p65 Rel complex. "c:  MAP.kinase.phosphoryl	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( IkB-p50-p65 ( *IkB-p50-p65 )  true )						  ( IkB ( *IkB  ) true )						  ( MAP.kinase ( *MAP.kinase ) true ) )	if.states			( ( activated ( *MAP.kinase) true ) )	if.not.states		( ( phosphorylated ( *IkB ) true ) )	then.states			( ( phosphorylated ( *IkB ) true ) )	then.relates		( ( phosphorylates ( *MAP.kinase *IkB) true ) )	then.say			" MAP kinase phosphorylates IkB bound to p50-p65 Rel complex. "c:	prot.kin.C.IkB.phosphoryl 	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( IkB-p50-p65 ( *IkB-p50-p65 ) true )						  ( IkB ( *IkB ) true )						  ( p50-p65 ( *p50-p65 ) true )						  ( protein.kinase.C ( *protein.kinase.C ) true ) 						  ( T-cell ( *T-cell ) true )						  ( HIV ( *HIV ) true ) )	if.states			( ( activated ( *protein.kinase.C ) true ) )	if.relates			( ( infects ( *HIV  *T-cell ) true ) )	if.not.states		( ( phosphorylated ( *IkB ) true ) )	then.states			( ( phosphorylated ( *IkB ) true ) )	then.relates		( ( phosphorylates ( *protein.kinase.C *IkB) true ) )	then.say			" Protein kinase C phosphorylates IkB bound to p50-p65 Rel complex. "c:	SRF.phosphorylation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( SRF ( *SRF ) true )						  ( protein.kinase ( *protein.kinase ) true ) )	if.states			( ( activated ( *protein.kinase ) true ) )	if.not.states		( ( phosphorylated ( *SRF ) true ) )	then.states			( ( phosphorylated ( *SRF ) true ) )	then.relates		( ( phosphorylates ( *protein.kinase *SRF) true ) )	then.say			" Protein kinase phosphorylates serum response factor. "	c:  SRF.phosphorylation.2	level				basic	sub.of				phys.process	instance.of			process.rule	my.creator			eai	context				Gene.transcription.regulation	if.actors			( ( SRF ( *SRF ) true )						  ( protein.kinase.C ( *protein.kinase.C ) true )						  ( astrocytoma.cell ( *astrocytoma.cell ) true ) )	if.states			( ( activated ( *protein.kinase.C ) true ) )	if.not.states		( ( phosphorylated ( *SRF ) true ) )	then.states			( ( phosphorylated ( *SRF ) true ) )	then.say			" Protein kinase C phosphorylates serum response factor. "c:	TCF.phosphorylation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( TCF ( *TCF ) true )						  ( protein.kinase ( *protein.kinase ) true ) )	if.states			( ( activated ( *protein.kinase ) true ) )	if.not.states		( ( phosphorylated ( *TCF ) true ) )	then.states			( ( phosphorylated ( *TCF ) true ) )	then.relates		( ( phosphorylates ( *protein.kinase *TCF) true ) )	then.say			" Protein kinase phosphorylates ternary complex factor-TCF. "	c:	TCF.phosphorylation.2	level				basic	sub.of				phys.process	instance.of			process.rule	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( TCF ( *TCF ) true )						  ( MAPK ( *MAPK ) true ) )	if.states			( ( activated ( *MAPK ) true ) )	if.not.states		( ( phosphorylated ( *TCF ) true ) )	then.states			( ( phosphorylated ( *TCF ) true ) )	then.relates 		( ( phosphorylates ( *MAPK *TCF ) true ) )	then.say			"MAPK phosphorylates ternary complex factor-TCF. "		c:  TCF.phosphorylation.3	level				basic	sub.of				phys.process	instance.of			process.rule	my.creator			eai	context				Gene.transcription.regulation	if.actors			( ( TCF ( *TCF ) true ) 						  ( protein.kinase.C ( *protein.kinase.C ) true ) 						  ( astrocytoma.cell ( *astrocytoma.cell ) true )						 )	if.states			( ( activated ( *protein.kinase.C ) true ) )	if.not.states		( ( phosphorylated ( *TCF ) true ) )	then.states			( ( phosphorylated ( *TCF ) true ) )	then.relates		( ( phosphorylates ( *protein.kinase.C *TCF ) true ) )	then.say			" Protein kinase C phosphorylates ternary complex factor-TCF. "		c:	SRF.dimerization.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( SRF ( *SRF ) true ) )	if.states			( ( phosphorylated ( *SRF ) true ) )	if.not.states		( ( formed ( *SRF.dimer ) true ) )	then.create			( *SRF.dimer )	then.actors			( ( SRF.dimer ( *SRF.dimer ) true )	 					  ( SRF ( *SRF ) false ) )	then.states			( ( formed ( *SRF.dimer ) true ) )	then.say			" Serum response factor dimer SRF-SRF formed. "c:	NF-kB.activation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( IkB-p50-p65 ( *IkB-p50-p65 ) true )						  ( IkB ( *IkB ) true )						  ( p50-p65 ( *p50-p65 ) true )						  ( nucleus ( *nucleus ) true ) 						  ( T-cell ( *T-cell ) true )						  ( HIV ( *HIV ) true ) 						  ( protein.kinase.C ( *protein.kinase.C ) true ) )	if.states			( ( phosphorylated ( *IkB ) true ) )	if.not.states 		( ( unbound ( *p50-p65 ) true ) )	if.relates			( ( infects ( *HIV  *T-cell ) true ) 						  ( bound.to ( *p50-p65 *IkB ) true ) )	then.actors			( ( IkB-p50-p65 ( *IkB-p50-p65 ) false)	                      ( p50-p65 ( *p50-p65 ) true ) )	then.states			( ( unbound ( *p50-p65 ) true )						  ( degraded ( *IkB ) true ) )	then.relates		( ( cleaved.from ( *p50-p65 *IkB ) true )						  ( bound.to ( *p50-p65 *IkB ) false ) )	then.say			" NF-kB activated from unbinding IkB-p50-p65. "c:	p50-p65.translocation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( p50-p65 ( *p50-p65 ) true )						  ( nucleus ( *nucleus ) true ) 						  ( T-cell ( *T-cell ) true )						  ( HIV ( *HIV ) true ) )	if.states			( ( unbound ( *p50-p65 ) true ) )	if.relates			( ( infects ( *HIV  *T-cell ) true ) )	if.not.relates		( ( translocated.to ( *p50-p65 *nucleus ) true ) )	then.relates		( ( translocated.to ( *p50-p65 *nucleus ) true ) )	then.say			" Free p50-p65 Rel complex translocated to nucleus. "	\	--------------------Gene Regulator Bindingc:	p50-p65-kB-binding.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( p50-p65 ( *p50-p65 ) true )						  ( nucleus ( *nucleus ) true )						  ( promoter.kB-binding.site ( *promoter.kB-binding.site ) true )						  ( Proviral.gene ( *Proviral.gene ) true )						  ( T-cell ( *T-cell ) true )						  ( HIV ( *HIV ) true ) )	if.states			( ( unbound ( *p50-p65 ) true ) )	if.not.states		( ( activated ( *Proviral.gene ) true ) )	if.relates			( ( translocated.to ( *p50-p65 *nucleus ) true )						  ( infects ( *HIV *T-cell ) true ) )	then.states			( ( activated ( *Proviral.gene ) true ) )	then.relates		( ( binds.to ( *p50-p65 *promoter.kB-binding.site ) true ) )	then.say			" Translocated p50-p65 Rel complex binds to gene KB site and Proviral gene activated. "c:	Fos-Jun-TRE-binding.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( Fos-Jun ( *Fos-Jun ) true )						  ( nucleus ( *nucleus ) true )						  ( TRE ( *TRE ) true )						  ( gene.B ( *gene.B ) true ) )	if.states			( ( produced ( *Fos-Jun ) true ) )	if.not.states		( ( activated ( *gene.B ) true ) )	if.relates			( ( translocated.to ( *Fos-Jun *nucleus ) true ) )	then.states			( ( activated ( *gene.B ) true ) )	then.relates		( ( binds.to ( *Fos-Jun *TRE ) true ) )	then.say			" Translocated Fos-Jun complex binds to promoter TRE site and gene B activated. "c:	Fos-Jun-TRE-binding.2	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( Fos-Jun ( *Fos-Jun ) true )						  ( nucleus ( *nucleus ) true )						  ( TRE ( *TRE ) true )						  ( astrocytoma.cell ( *astrocytoma.cell ) true )						  ( TNF-alpha.gene ( *TNF-alpha.gene ) true ) )	if.states			( ( produced ( *Fos-Jun ) true ) )	if.relates			( ( translocated.to ( *Fos-Jun *nucleus ) true ) )	if.not.relates		( ( binds.to ( *Fos-Jun *TRE ) true ) )	then.relates		( ( binds.to ( *Fos-Jun *TRE ) true ) )	then.say			" Translocated Fos-Jun complex binds to promoter TRE site and gene B activated. "c:	Jun-Jun-TRE-binding.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( Jun-Jun ( *Jun-Jun ) true )						  ( nucleus ( *nucleus ) true )						  ( TRE ( *TRE ) true )						  ( c-jun ( *c-jun ) true ) )	if.states			( ( produced ( *Jun-Jun ) true ) )	if.not.states		( ( activated ( *c-jun ) true ) )	if.relates			( ( translocated.to ( *Jun-Jun *nucleus ) true ) )	then.states			( ( activated ( *c-jun ) true ) )	then.relates		( ( binds.to ( *Jun-Jun *TRE ) true ) )	then.say			" Translocated Jun-Jun complex binds to promoter TRE site and c-jun gene activated. "c:	SRF-SRE-binding.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( nucleus ( *nucleus ) true )						  ( SRF.dimer ( *SRF.dimer ) true )						  ( SRE ( *SRE ) true )						  ( c-fos ( *c-fos ) true ) )	if.states			( ( formed ( *SRF.dimer ) true ) )	if.not.relates		( ( binds.to ( *SRF.dimer *SRE ) true ) )	then.states			( ( binding ( *SRE ) true ) )	then.relates		( ( binds.to ( *SRF.dimer *SRE ) true ) )	then.say			" SRF dimer binds to c-fos promoter SRE site. "c:	TCF-TBS-binding.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( nucleus ( *nucleus ) true )						  ( TCF.binding.site ( *TCF.binding.site ) true )						  ( TCF ( *TCF ) true )						  ( c-fos ( *c-fos ) true ) ) 	if.states			( ( phosphorylated ( *TCF ) true ) )	if.not.relates		( ( binds.to ( *TCF *TCF.binding.site ) true ) )	then.states			( ( binding ( *TCF ) true ) )		then.relates		( ( binds.to ( *TCF *TCF.binding.site ) true ) )	then.say			" TCF binds adjacent to c-fos promoter SRE site. "		c:  IL-1-Beta.binding.1	level				basic	sub.of				phys.process	instance.of			process.rule	my.creator			eai	context				Gene.transcription.regulation	if.actors			( ( astrocytoma.cell ( *astrocytoma.cell ) true ) 	 					  ( IL-1-Beta ( *IL-1-Beta ) true ) 	 					  ( IL-1-Beta.receptor ( *IL-1-Beta.receptor ) true )	 					)	if.not.relates		( ( binds.to ( *IL-1-Beta *IL-1-Beta.receptor ) true ) )	then.relates		( ( binds.to ( *IL-1-Beta *IL-1-Beta.receptor ) true ) )	then.say			" IL-1-Beta binds to its receptor. "	\	--------------------Gene Activation and Transcriptionc:	Proviral.gene.transcription.initiated.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( p50-p65 ( *p50-p65 ) true )						  ( nucleus ( *nucleus ) true )						  ( promoter.kB-binding.site ( *promoter.kB-binding.site ) true )						  ( Proviral.gene ( *Proviral.gene ) true ) 						  ( T-cell ( *T-cell ) true )						  ( HIV ( *HIV ) true ) )	if.states			( ( activated ( *Proviral.gene ) true ) )	if.not.states		( ( transcribed ( *Proviral.gene ) true ) )		if.relates			( ( binds.to ( *p50-p65 *promoter.kB-binding.site ) true )						  ( infects ( *HIV  *T-cell ) true ) )	then.states			( ( transcribed ( *Proviral.gene ) true ) )	then.say			" Proviral gene transcription initiated. "c:	Gene.B.transcription.initiated.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( Fos-Jun ( *Fos-Jun ) true )						  ( nucleus ( *nucleus ) true )						  ( TRE ( *TRE ) true )						  ( gene.B ( *gene.B ) true ) )	if.states			( ( activated ( *gene.B ) true ) )	if.not.states		( ( transcribed ( *gene.B ) true ) )		if.relates			( ( binds.to ( *Fos-Jun *TRE ) true ) )	then.states			( ( transcribed ( *gene.B ) true ) )	then.say			" Gene B transcription initiated. "c:	c-jun.transcription.initiated.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( Jun-Jun ( *Jun-Jun ) true )						  ( nucleus ( *nucleus ) true )						  ( TRE ( *TRE ) true )						  ( c-jun ( *c-jun ) true ) )	if.states			( ( activated ( *c-jun ) true ) )	if.not.states		( ( transcribed ( *c-jun ) true ) )		if.relates			( ( binds.to ( Jun-Jun *TRE ) true ) )	then.states			( ( transcribed ( *c-jun ) true ) )	then.say			" C-jun gene transcription initiated. "c:	c-fos.transcription.initiated.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( nucleus ( *nucleus ) true )						  ( c-fos ( *c-fos ) true )						  ( SRF.dimer ( *SRF.dimer ) true )						  ( SRE ( *SRE ) true )						  ( TCF.binding.site ( *TCF.binding.site ) true )						  ( TCF ( *TCF ) true ) )	if.not.states		( ( activated ( *c-fos ) true ) )		if.relates			( ( binds.to ( *SRF.dimer *SRE ) true )						  ( binds.to ( *TCF *TCF.binding.site ) true ) )	then.states			( ( activated ( *c-fos ) true )						  ( transcribed ( *c-fos ) true ) )	then.say			" C-fos gene transcription initiated. "	c:  TNF-alpha.gene.activation.1	level				basic	sub.of				phys.process	instance.of			process.rule	my.creator			eai	if.actors			( ( Fos-Jun ( *Fos-Jun ) true )						  ( nucleus ( *nucleus ) true )						  ( TRE ( *TRE ) true )						  ( astrocytoma.cell ( *astrocytoma.cell ) true )						  ( TNF-alpha.gene ( *TNF-alpha.gene ) true ) )	if.not.states		( ( activated ( *TNF-alpha.gene ) true ) )		if.relates			( ( binds.to ( *Fos-Jun *TRE ) true ) )	then.states			( ( activated ( *TNF-alpha.gene ) true ) )	then.say			" Fos-Jun TRE binding activates TNF-alpha gene. "			\	--------------------Regulatory Protein Production 		c:	cjun.production.1   \ this rule skips RNA translation and produces cjun when gene transcribed	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( c-jun ( *c-jun ) true ) )	if.not.actors		( ( cjun ( *cjun ) true ) )	if.states			( ( transcribed ( *c-jun ) true ) )	if.not.states		( ( produced ( *cjun ) true ) )	then.create			( *cjun )	then.actors			( ( cjun ( *cjun ) true ) )	then.states			( ( produced ( *cjun ) true ) )	then.say			" Cjun protein produced. "c:	cfos.production.1   \ this rule skips RNA translation and produces cfos when gene transcribed	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( c-fos ( *c-fos ) true ) )	if.not.actors		( ( cfos ( *cfos ) true ) )	if.states			( ( transcribed ( *c-fos ) true ) )	if.not.states		( ( produced ( *cfos ) true ) )	then.create			( *cfos )	then.actors			( ( cfos ( *cfos ) true ) )	then.states			( ( produced ( *cfos ) true ) )	then.say			" Cfos protein produced. "c:	cjun.phosphorylation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( cjun ( *cjun ) true ) 						  ( protein.kinase ( *protein.kinase ) true ) )	if.states			( ( activated ( *protein.kinase ) true ) )	if.not.states		( ( phosphorylated ( *cjun ) true ) )	then.states			( ( phosphorylated ( *cjun ) true ) )	then.relates		( ( phosphorylates ( *protein.kinase *cjun) true ) )	then.say			" Protein kinase phosphorylates cjun. "	c:	MAPK.cjun.phosphorylation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( cjun ( *cjun ) true ) 						  ( MAPK ( *MAPK ) true ) )	if.states			( ( activated ( *MAPK ) true ) )	if.not.states		( ( phosphorylated ( *cjun ) true ) )	then.states			( ( phosphorylated ( *cjun ) true ) )	then.relates 		( ( phosphorylated ( *MAPK *cjun ) true ) )	then.say			"MAP kinase phosphorylates cjun. "		c:	Jun-Jun.production	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( cjun ( *cjun ) true )						  ( nucleus ( *nucleus ) true )						  ( protein.kinase ( *protein.kinase ) true ) )	if.not.actors		( ( Jun-Jun ( *Jun-Jun ) true ) )	if.states			( ( phosphorylated ( *cjun ) true ) )	if.not.states		( ( produced ( *Jun-Jun ) true ) )	then.create			( *Jun-Jun )	then.actors			( ( Jun-Jun ( *Jun-Jun ) true ) )	then.states			( ( produced ( *Jun-Jun ) true ) )	then.relates		( ( translocated.to ( *Jun-Jun *nucleus ) true ) )	then.say			" Jun-Jun dimer produced from phosphorylated Jun and translocated to nucleus. "	c:	Fos-Jun.production	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( cjun ( *cjun ) true )						  ( cfos ( *cfos ) true )						  ( nucleus ( *nucleus ) true ) )	if.not.actors		( ( Fos-Jun ( *Fos-Jun ) true ) )\	if.states			( ( produced ( *cfos ) true )\						  ( produced ( *cjun ) true ) )	if.not.states		( ( produced ( *Fos-Jun ) true ) )	then.create			( *Fos-Jun )	then.actors			( ( Fos-Jun ( *Fos-Jun ) true ) )	then.states			( ( produced ( *Fos-Jun ) true ) )	then.relates		( ( translocated.to ( *Fos-Jun *nucleus ) true ) )	then.say			" Fos-Jun dimer produced from Fos and Jun proteins and translocated to nucleus. "\	--------------------ROS-Enzyme Processesc:	pro.kin.activation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( ROS ( *ROS ) true )						  ( protein.kinase ( *protein.kinase ) true ) )	if.not.states		( ( activated ( *protein.kinase ) true ) )	then.states			( ( activated ( *protein.kinase ) true ) )	then.say			" Protein kinase activated by reactive oxygen species. "	c:	pro.kin.activation.2	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( H2O2 ( *H2O2 ) true )	                      ( chondrocyte ( *chondrocyte ) true )						  ( protein.kinase ( *protein.kinase ) true ) )	if.not.states		( ( activated ( *protein.kinase ) true ) )	then.states			( ( activated ( *protein.kinase ) true ) )	then.say			" Chondrocyte protein kinase activated by H2O2 "c:  pro.kin.C.activation.1	level 				basic	sub.of				phys.process	instance.of			process.rule	my.creator			eai	context				Gene.transcription.regulation	if.actors			( ( OH.radical ( *OH.radical ) true )						  ( protein.kinase.C ( *protein.kinase.C ) true )						  ( T-cell ( *T-cell ) true)						  ( HIV ( *HIV ) true ) )	if.states			( ( produced ( *OH.radical ) true ) )	if.not.states		( ( activated ( *protein.kinase.C ) true ) )	if.relates			( ( infects ( *HIV  *T-cell ) true ) )	then.states			( ( activated ( *protein.kinase.C ) true ) )	then.say			"T-Cell protein kinase activated by H2O2."c:  pro.kin.C.activation.2    level				basic	sub.of				phys.process	instance.of			process.rule	my.creator			eai	context				Gene.transcription.regulation	if.actors			( ( protein.kinase.C ( *protein.kinase.C ) true )						  ( astrocytoma.cell ( *astrocytoma.cell ) true )						  ( IL-1-Beta ( *IL-1-Beta ) true )						  ( IL-1-Beta.receptor ( *IL-1-Beta.receptor ) true )						)	if.relates			( ( binds.to ( *IL-1-Beta *IL-1-Beta.receptor ) true ) )	if.not.states		( ( activated ( *protein.kinase.C ) true ) )	then.states			( ( activated ( *protein.kinase.C ) true ) )	then.say			" Astrocytoma cell activated protein kinase C. "	c:  pro.kin.C.non-activation.1	level 				basic	sub.of				phys.process	instance.of			process.rule	my.creator			eai	context				Gene.transcription.regulation	if.actors			( ( protein.kinase.C ( *protein.kinase.C ) true )						  ( T-cell ( *T-cell ) true)						  ( HIV ( *HIV ) true ) 						  ( DFO ( *DFO ) true ) )	if.states			( ( not.produced ( *OH.radical ) true ) )	if.not.states		( ( unactivated ( *protein.kinase.C ) true ) )	if.relates			( ( infects ( *HIV  *T-cell ) true ) 						  ( reduces ( *DFO *H2O2.concentration ) true ) )	then.states			( ( unactivated ( *protein.kinase.C ) true ) )	then.say			"Very low H2O2 concentration prevents protein kinase C activation."				c:	tyr.pro.kin.activation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( ROS ( *ROS ) true )						  ( protein.tyrosine.kinase ( *protein.tyrosine.kinase ) true ) )	if.not.states		( ( activated ( *protein.tyrosine.kinase ) true ) )	then.states			( ( activated ( *protein.tyrosine.kinase ) true ) )	then.say			" Tyrosine protein kinase activated by reactive oxygen species. "c:	GH.tyr.kinase.activation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors 			( ( tyrosine.kinase ( *tyrosine.kinase )  true )						  ( growth.hormone	( *growth.hormone )  true )						  ( growth.hormone.receptor ( *growth.hormone.receptor ) true ) )	if.not.states		( ( activated ( *tyrosine.kinase ) true ) )	then.states			( ( activated ( *tyrosine.kinase ) true ) )	then.relates		( ( binds.to ( *growth.hormone *growth.hormone.receptor ) true ) )	then.say			" Growth hormone binds to member receptor and tyrosine kinase activated. "	c:	MAP.kinase.activation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( ROS ( *ROS ) true )						  ( MAP.kinase ( *MAP.kinase ) true ) )	if.not.states		( ( activated ( *MAP.kinase ) true ) )	then.states			( ( activated ( *MAP.kinase ) true ) )	then.say			"RPTK activated by reactive oxygen species. "  c:  TNF-chondrocyte.stim.1	level				basic	sub.of				phys.process	instance.of			process.rule	my.creator			eai	context				Gene.transcription.regulation	if.actors			( ( chondrocyte ( *chondrocyte ) true )						  ( TNF-alpha ( *TNF-alpha ) true ) )	if.not.actors		( ( H2O2 ( *H2O2 ) true ) )	then.create 		( *H2O2 )	then.actors			( ( H2O2 ( *H2O2 ) true ) )	then.say			"TNF-alpha stimulate H2O2 production by chondrocyte. "c:	Shc.activation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( Shc ( *Shc ) true ) 						  ( tyrosine.kinase ( *tyrosine.kinase )  true ) )	if.states			( ( activated ( *tyrosine.kinase ) true ) )	if.not.states		( ( phosphorylated ( *Shc ) true ) )	then.states			( ( phosphorylated ( *Shc ) true ) )	then.say			"Activated tyrosine kinase phosphorylates Shc. "	c:	c-Ras.activation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( Shc ( *Shc ) true )						  ( tyrosine.kinase ( *tyrosine.kinase ) true )						  ( c-Ras ( *c-Ras ) true ) )	if.states			( ( phosphorylated ( *Shc )  true ) )	if.not.states		( ( activated ( *c-Ras ) true ) )	then.states			( ( activated ( *c-Ras ) true ) )	then.say			" Phosphorylated Shc induces activation of c-Ras. "	c:	c-Raf.activation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( c-Ras ( *c-Ras ) true )						  ( c-Raf ( *c-Raf ) true ) )	if.states			( ( activated ( *c-Ras ) true ) )	if.not.states		( ( activated ( *c-Raf ) true ) )	then.states			( ( activated ( *c-Raf ) true ) )	then.say			"Activated c-Ras induces c-Raf activation. "	c:	MAPK.kinase.activation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( c-Raf ( *c-Raf ) true )						  ( MAPK.kinase ( *MAPK.kinase ) true ) )	if.states			( ( activated ( *c-Raf ) true ) )	if.not.states		( ( activated ( *MAPK.kinase ) true ) )	then.states			( ( activated ( *MAPK.kinase ) true ) )	then.say			"Activated c-Raf induces MAPK.kinase activation. "	c:	MAP.kinase.activation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( MAPK.kinase ( *MAPK.kinase ) true ) 						  ( MAPK ( *MAPK ) true ) )	if.states			( ( activated ( *MAPK.kinase ) true ) )	if.not.states		( ( activated ( *MAPK ) true ) )	then.states			( ( activated ( *MAPK ) true ) )	then.say			"Activated MAPK.kinase induces MAPK activation. "	c:	RSK.activation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( RSK ( *RSK ) true ) 						  ( MAPK ( *MAPK ) true ) )	if.states			( ( activated ( *MAPK ) true ) )	if.not.states		( ( activated ( *RSK ) true ) )	then.states			( ( activated ( *RSK ) true ) )	then.say			"Activated MAPK induces RSK activation. "					\	--------------------Free Radical Processesc:	H2O2-OH.radical.gen.1	level				basic	sub.of				phys.process	instance.of			process.rule	my.creator			eai	context				Gene.transcription.regulation	if.actors			( ( H2OH ( *H2OH ) true ) 						  ( Fe3+ ( *Fe3+ ) true ) )	if.not.actors 		( ( DFO ( *DFO ) true ) )    if.not.states		( ( produced ( *OH.radical ) true ) )	then.create			( *OH.radical )	then.actors			( ( OH.radical ( *OH.radical ) true ) 						  ( H2OH ( *H2OH ) false ) )	then.states			( ( produced ( *OH.radical ) true ) )	then.say			"Hydrogen peroxide in the presence of Fe3+ produces Hydroxyl radical. "	c:	H2O2-OH.radical.gen.2	level				basic	sub.of				phys.process	instance.of			process.rule	my.creator			eai	context				Gene.transcription.regulation	if.actors			( ( H2OH ( *H2OH ) true )						  ( Fe3+ ( *Fe3+ ) true )						  ( DFO ( *DFO ) true ) ) 	if.not.states		( ( unreduced ( *H2O2 ) true ) )	then.states			( ( unreduced ( *H2O2 ) true ) )	then.say			"H2O2 in the presence of Fe3+ and DFO does not produce OH.radical. "