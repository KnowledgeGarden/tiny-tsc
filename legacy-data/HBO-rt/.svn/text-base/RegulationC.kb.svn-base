{RegulationC.kbdescription:	Regulation KB-  Signalling, genes, transcriptionsneed to do:		Xto improve:		XPROBLEMS:			notes:			originated by rbt requires bioprimitive.t, cell.t, histo.t, immune.t HISTORY:6/30/96			start NF-kB, AP-1 rules7/1-2			c-jun rules7/3/95			c-fos rules7/5/96			Production of cjun, cfos, Fos-Jun, and Jun-Jun dimers, ROS activation of kinases}\	--------------------Transcription Factor Phosphorylation Processes{c:	Tyr.p.kin.IkB.phosphoryl	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( IkB-p50-p65 ( *IkB-p50-p65 )  true )						  ( IkB ( *IkB  ) true )						  ( protein.tyrosine.kinase ( *protein.tyrosine.kinase ) true )	if.states			( ( activated ( *protein.tyrosine.kinase ) true ) )	if.not.states		( ( phosphorylated ( *IkB ) true ) )	then.states			( ( phosphorylated ( *IkB ) true ) )	then.relates		( ( phosphorylates ( *protein.tyrosine.kinase *IkB) true ) )	then.say			" Tyrosine protein kinase phosphorylates IkB bound to p50-p65 Rel complex. "}c:	prot.kin.C.IkB.phosphoryl 	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( IkB-p50-p65 ( *IkB-p50-p65 ) true )						  ( IkB ( *IkB ) true )						  ( protein.kinase.C ( *protein.kinase.C ) true ) 						  ( T-cell ( *T-cell ) true )						  ( HIV ( *HIV ) true ) )	if.states			( ( activated ( *protein.kinase.C ) true ) )	if.relates			( ( infects ( *HIV  *T-cell ) true ) )	if.not.states		( ( phosphorylated ( *IkB ) true ) )	then.states			( ( phosphorylated ( *IkB ) true ) )	then.relates		( ( phosphorylates ( *protein.kinase.C *IkB) true ) )	then.say			" Protein kinase C phosphorylates IkB bound to p50-p65 Rel complex. "{c:	SRF.phosphorylation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( SRF ( *SRF ) true )						  ( protein.kinase ( *protein.kinase ) true )	if.states			( ( activated ( *protein.kinase ) true ) )	if.not.states		( ( phosphorylated ( *SRF ) true ) )	then.states			( ( phosphorylated ( *SRF ) true ) )	then.relates		( ( phosphorylates ( *protein.kinase *SRF) true ) )	then.say			" Protein kinase phosphorylates serum response factor. "c:	TCF.phosphorylation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( TCF ( *TCF ) true )						  ( protein.kinase ( *protein.kinase ) true )	if.states			( ( activated ( *protein.kinase ) true ) )	if.not.states		( ( phosphorylated ( *TCF ) true ) )	then.states			( ( phosphorylated ( *TCF ) true ) )	then.relates		( ( phosphorylates ( *protein.kinase *TCF) true ) )	then.say			" Protein kinase phosphorylates ternary complex factor-TCF. "		c:	SRF.dimerization.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( SRF ( *SRF ) true )	if.states			( ( phosphorylated ( *SRF ) true ) )	if.not.states		( ( formed ( *SRF.dimer ) true ) )	then.create			( *SRF.dimer )	then.actors			( ( SRF.dimer ( *SRF.dimer ) true )	 					  ( SRF ( *SRF ) false ) )	then.states			( ( formed ( *SRF.dimer ) true ) )	then.say			" Serum response factor dimer SRF-SRF formed. "}c:	NF-kB.activation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( IkB-p50-p65 ( *IkB-p50-p65 ) true )						  ( IkB ( *IkB ) true )						  ( nucleus ( *nucleus ) true ) 						  ( T-cell ( *T-cell ) true )						  ( HIV ( *HIV ) true ) )	if.states			( ( phosphorylated ( *IkB ) true ) )	if.not.states		( ( unbound ( *p50-p65 ) true ) )	if.relates			( ( infects ( *HIV  *T-cell ) true ) )	then.create			( *p50-p65 )	then.actors			( ( IkB-p50-p65 ( *IkB-p50-p65 ) false)	                      ( p50-p65 ( *p50-p65 ) true ) )	then.states			( ( unbound ( *p50-p65 ) true )						  ( degraded ( *IkB ) true ) )	then.say			" Degradation of bound IkB triggered, and p50-p65 Rel complex released. "c:	p50-p65.translocation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( p50-p65 ( *p50-p65 ) true )						  ( nucleus ( *nucleus ) true ) 						  ( T-cell ( *T-cell ) true )						  ( HIV ( *HIV ) true ) )	if.states			( ( unbound ( *p50-p65 ) true ) )	if.relates			( ( infects ( *HIV  *T-cell ) true ) )	if.not.relates		( ( translocated.to ( *p50-p65 *nucleus ) true ) )	then.relates		( ( translocated.to ( *p50-p65 *nucleus ) true ) )	then.say			" Free p50-p65 Rel complex translocated to nucleus. "\	--------------------Gene Regulator Bindingc:	p50-p65-kB-binding.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( p50-p65 ( *p50-p65 ) true )						  ( nucleus ( *nucleus ) true )						  ( promoter.kB-binding.site ( *promoter.kB-binding.site ) true )						  ( Proviral.gene ( *Proviral.gene ) true )						  ( T-cell ( *T-cell ) true )						  ( HIV ( *HIV ) true ) )	if.states			( ( unbound ( *p50-p65 ) true ) )	if.not.states		( ( activated ( *Proviral.gene ) true ) )	if.relates			( ( translocated.to ( *p50-p65 *nucleus ) true )						  ( infects ( *HIV *T-cell ) true ) )	then.states			( ( activated ( *Proviral.gene ) true ) )	then.relates		( ( binds.to ( *p50-p65 *promoter.kB-binding.site ) true ) )	then.say			" Translocated p50-p65 Rel complex binds to gene KB site and Proviral gene activated. "{c:	Fos-Jun-TRE-binding.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( Fos-Jun ( *Fos-Jun ) true )						  ( nucleus ( *nucleus ) true )						  ( TRE ( *TRE ) true )						  ( gene.B ( *gene.B ) true ) 	if.states			( ( produced ( *Fos-Jun ) true ) )	if.not.states		( ( activated ( *gene.B ) true ) )	if.relates			( ( translocated.to ( *Fos-Jun *nucleus ) true ) )	then.states			( ( activated ( *gene.B ) true ) )	then.relates		( ( binds.to ( *Fos-Jun *TRE ) true ) )	then.say			" Translocated Fos-Jun complex binds to promoter TRE site and gene B activated. "c:	Jun-Jun-TRE-binding.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( Jun-Jun ( *Jun-Jun ) true )						  ( nucleus ( *nucleus ) true )						  ( TRE ( *TRE ) true )						  ( c-jun ( *c-jun ) true )	if.states			( ( produced ( *Jun-Jun ) true ) )	if.not.states		( ( activated ( *c-jun ) true ) )	if.relates			( ( translocated.to ( *Jun-Jun *nucleus ) true ) )	then.states			( ( activated ( *c-jun ) true ) )	then.relates		( ( binds.to ( *Jun-Jun *TRE ) true ) )	then.say			" Translocated Jun-Jun complex binds to promoter TRE site and c-jun gene activated. "c:	SRF-SRE-binding.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( nucleus ( *nucleus ) true )						  ( SRF.dimer ( *SRF.dimer ) true )						  ( SRE ( *SRE ) true )						  ( c-fos ( *c-fos ) true )	if.states			( ( formed ( *SRF.dimer ) true ) )	if.not.relates		( ( binds.to ( *SRF.dimer *SRE ) true ) )	then.states			( ( binding ( *SRE ) true ) )	then.relates		( ( binds.to ( *SRF.dimer *SRE ) true ) )	then.say			" SRF dimer binds to c-fos promoter SRE site. "c:	TCF-TBS-binding.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( nucleus ( *nucleus ) true )						  ( TCF.binding.site ( *TCF.binding.site ) true )						  ( TCF ( *TCF ) true )						  ( c-fos ( *c-fos ) true ) 	if.states			( ( phosphorylated ( *TCF ) true ) )	if.not.relates		( ( binds.to ( *TCF *TCF.binding.site ) true ) )	then.states			( ( binding ( *TCF ) true ) )		then.relates		( ( binds.to ( *TCF *TCF.binding.site ) true ) )	then.say			" TCF binds adjacent to c-fos promoter SRE site. "}	\	--------------------Gene Activation and Transcriptionc:	Proviral.gene.transcription.initiated.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( p50-p65 ( *p50-p65 ) true )						  ( nucleus ( *nucleus ) true )						  ( promoter.kB-binding.site ( *promoter.kB-binding.site ) true )						  ( Proviral.gene ( *Proviral.gene ) true ) 						  ( T-cell ( *T-cell ) true )						  ( HIV ( *HIV ) true ) )	if.states			( ( activated ( *Proviral.gene ) true ) )	if.not.states		( ( transcribed ( *Proviral.gene ) true ) )		if.relates			( ( binds.to ( *p50-p65 *promoter.kB-binding.site ) true )						  ( infects ( *HIV  *T-cell ) true ) )	then.states			( ( transcribed ( *Proviral.gene ) true ) )	then.say			" Proviral gene transcription initiated. "{c:	Gene.B.transcription.initiated.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( Fos-Jun ( *Fos-Jun ) true )						  ( nucleus ( *nucleus ) true )						  ( TRE ( *TRE ) true )						  ( gene.B ( *gene.B ) true ) 	if.states			( ( activated ( *gene.B ) true ) )	if.not.states		( ( transcribed ( *gene.B ) true ) )		if.relates			( ( binds.to ( *Fos-Jun *TRE ) true ) )	then.states			( ( transcribed ( *gene.B ) true ) )	then.say			" Gene B transcription initiated. "c:	c-jun.transcription.initiated.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( Jun-Jun ( *Jun-Jun ) true )						  ( nucleus ( *nucleus ) true )						  ( TRE ( *TRE ) true )						  ( c-jun ( *c-jun ) true ) 	if.states			( ( activated ( *c-jun ) true ) )	if.not.states		( ( transcribed ( *c-jun ) true ) )		if.relates			( ( binds.to ( Jun-Jun *TRE ) true ) )	then.states			( ( transcribed ( *c-jun ) true ) )	then.say			" C-jun gene transcription initiated. "c:	c-fos.transcription.initiated.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( nucleus ( *nucleus ) true )						  ( c-fos ( *c-fos ) true )						  ( SRF.dimer ( *SRF.dimer ) true )						  ( SRE ( *SRE ) true )						  ( TCF.binding.site ( *TCF.binding.site ) true )						  ( TCF ( *TCF ) true )	if.not.states		( ( activated ( *c-fos ) true ) )		if.relates			( ( binds.to ( *SRF.dimer *SRE ) true )						  ( binds.to ( *TCF *TCF.binding.site ) true ) )	then.states			( ( activated ( *c-fos ) true )						  ( transcribed ( *c-fos ) true ) )	then.say			" C-fos gene transcription initiated. "}\	--------------------Regulatory Protein Production 	{	c:	cjun.production.1   \ this rule skips RNA translation and produces cjun when gene transcribed	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( c-jun ( *c-jun ) true ) 	if.not.actors		( ( cjun ( *cjun ) true ) )	if.states			( ( transcribed ( *c-jun ) true ) )	if.not.states		( ( produced ( *cjun ) true ) )	then.create			( *cjun )	then.actors			( ( cjun ( *cjun ) true ) )	then.states			( ( produced ( *cjun ) true ) )	then.say			" Cjun protein produced. "c:	cfos.production.1   \ this rule skips RNA translation and produces cfos when gene transcribed	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( c-fos ( *c-fos ) true ) 	if.not.actors		( ( cfos ( *cfos ) true ) )	if.states			( ( transcribed ( *c-fos ) true ) )	if.not.states		( ( produced ( *cfos ) true ) )	then.create			( *cfos )	then.actors			( ( cfos ( *cfos ) true ) )	then.states			( ( produced ( *cfos ) true ) )	then.say			" Cfos protein produced. "c:	cjun.phosphorylation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( cjun ( *cjun ) true )						  ( protein.kinase ( *protein.kinase ) true )	if.states			( ( activated ( *protein.kinase ) true ) )	if.not.states		( ( phosphorylated ( *cjun ) true ) )	then.states			( ( phosphorylated ( *cjun ) true ) )	then.relates		( ( phosphorylates ( *protein.kinase *cjun) true ) )	then.say			" Protein kinase phosphorylates cjun. "	c:	Jun-Jun.production	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( cjun ( *cjun ) true )						  ( nucleus ( *nucleus ) true )						  ( protein.kinase ( *protein.kinase ) true ) 	if.not.actors		( ( Jun-Jun ( *Jun-Jun ) true ) )	if.states			( ( phosphorylated ( *cjun ) true ) )	if.not.states		( ( produced ( *Jun-Jun ) true ) )	then.create			( *Jun-Jun )	then.actors			( ( Jun-Jun ( *Jun-Jun ) true ) )	then.states			( ( produced ( *Jun-Jun ) true ) )	then.relates		( ( translocated.to ( *Jun-Jun *nucleus ) true ) )	then.say			" Jun-Jun dimer produced from phosphorylated Jun and translocated to nucleus. "	c:	Fos-Jun.production	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( cjun ( *cjun ) true )						  ( cfos ( *cfos ) true )						  ( nucleus ( *nucleus ) true )	if.not.actors		( ( Fos-Jun ( *Fos-Jun ) true ) )\	if.states			( ( produced ( *cfos ) true )\						  ( produced ( *cjun ) true ) )	if.not.states		( ( produced ( *Fos-Jun ) true ) )	then.create			( *Fos-Jun )	then.actors			( ( Fos-Jun ( *Fos-Jun ) true ) )	then.states			( ( produced ( *Fos-Jun ) true ) )	then.relates		( ( translocated.to ( *Fos-Jun *nucleus ) true ) )	then.say			" Fos-Jun dimer produced from Fos and Jun proteins and translocated to nucleus. "}\	--------------------ROS-Enzyme Processes{c:	pro.kin.activation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( ROS ( *ROS ) true )						  ( protein.kinase ( *protein.kinase ) true )	if.not.states		( ( activated ( *protein.kinase ) true ) )	then.states			( ( activated ( *protein.kinase ) true ) )	then.say			" Protein kinase activated by reactive oxygen species. "	c:	pro.kin.activation.2	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( H2O2 ( *H2O2 ) true )	                      ( chondrocyte ( *chondrocyte ) true )						  ( protein.kinase ( *protein.kinase ) true )	if.not.states		( ( activated ( *protein.kinase ) true ) )	then.states			( ( activated ( *protein.kinase ) true ) )	then.say			" Chondrocyte protein kinase activated by H2O2 "}c:  pro.kin.C.activation.1	level 				basic	sub.of				phys.process	instance.of			process.rule	my.creator			eai	context				Gene.transcription.regulation	if.actors			( ( H2O2 ( *H2O2 ) true )						  ( protein.kinase.C ( *protein.kinase.C ) true )						  ( T-cell ( *T-cell ) true)						  ( HIV ( *HIV ) true ) )	if.not.states		( ( activated ( *protein.kinase.C ) true ) )	if.relates			( ( infects ( *HIV  *T-cell ) true ) )	then.states			( ( activated ( *protein.kinase.C ) true ) )	then.say			"T-Cell protein kinase activated by H2O2."		{c:	tyr.pro.kin.activation.1	level				basic	sub.of				phys.process	instance.of			process.rule 	my.creator			rbt	context				Gene.transcription.regulation	if.actors			( ( ROS ( *ROS ) true )						  ( protein.tyrosine.kinase ( *protein.tyrosine.kinase ) true )	if.not.states		( ( activated ( *protein.tyrosine.kinase ) true ) )	then.states			( ( activated ( *protein.tyrosine.kinase ) true ) )	then.say			" Tyrosine protein kinase activated by reactive oxygen species. "c:  TNF-chondrocyte.stim.1	level				basic	sub.of				phys.process	instance.of			process.rule	my.creator			eai	context				Gene.transcription.regulation	if.actors			( ( chondrocyte ( *chondrocyte ) true )						  ( TNF-alpha ( *TNF-alpha ) true )	if.not.actors		( ( H2O2 ( *H2O2 ) true ) )	then.create 		( *H2O2 )	then.actors			( ( H2O2 ( *H2O2 ) true ) )	then.say			"TNF-alpha stimulate H2O2 production by chondrocyte. "}