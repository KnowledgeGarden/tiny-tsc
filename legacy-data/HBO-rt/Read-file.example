{ Load-file/Read-file Example from TSC User's Guide }{ Example from User's Manualc:	BIO-Readfile	sub.of		function	i.take		list	i.give		none	arguments	*files	my.vars		*refnum *helix *seqres	algorithm	( do					( display> "reading: " debug ) ( display *files debug )					( bindq *seqres F )					( bindq *helix F )					( loop.until ( null? *files )						( do ( bindq *refnum ( file-open ( first *files ) \ open a file						( cond	( ( equal? *refnum 0 )								  ( display> "Cannot open file" debug ) )								( T	( do ( bindq *seqres ( scan.till.seqres ) )										 ( if.true ( and? ( second *seqres )												   ( not? first *seqres )													( do ( bindq *seqres 													  	 ( collect.seqres 'pbd.data ) )													  	 ( if.true ( not? ( second *seqres ) )													  		( do													  		  ( display> "looking for helix in " debug )													  		  ( display ( first *files ) debug )													  		  ( put 'pbd.data 'name nil )													  		  ( put 'pbd.data 'helices nil )													  		  ( bind *helix (scan.til.helix ) )													  		  ( if.true ( and? ( second *helix )													  			  		( not? ( first *helix ) ) )													  			  		( bindq *helix ( cache.helix													  			  							 'pbd.data ) ) )													  			  		( put 'pbd.data 'sheet nil )													  			  		( bindq *sheet ( scan.til.sheet ) )													  		 ( if.true  ( and? ( second *sheet )													  			  		( not? ( first *sheet ) ) )													  			  		( bindq *sheet (cache.sheet 'pbd.data ) ) )													  			  		( put 'pbd.data 'turn nil )													  			 		( bindq *turn (scan.til.turn ) )													  		 ( if.true ( and?  ( second *turn )													  			  		( not ? ( first *turn ) ) )													  			  		( bindq *turn ( cache.turn 'pbd.data ) ) )													  			  		( bindq *atom nil )													  			  		( display> "about to scan atom " debug )													  			  		( display ( first *files ) debug )													  			  		( bindq *atom (scan.til atom ) )													  			  		( bindq *offset ( get.atoms ) )													  			  		( display> "offset: " debug )													  			  		( display *offset debug )													  			  		( display> ( show.node 'pbd.data ) log )													  			  		( if.true ( notnull? ( get 'pbd.data 'helices ) )													  			  			( convert.helix 'pbd.data ( copy.list *offset ) ) )													  			  		( if.true ( notnull? ( get 'pbd.data 'sheet ) )													  			  			( convert.sheet 'pbd.data ( copy.list *offset ) ) )													  			  		( if.true ( notnull? ( get 'pbd.data 'turn ) )													  			  			( convert.turn 'pbd.data *offset ) )													  			  			( bindq *files nil ) ) )	\ done													  			  			) ) ) ) ) ) )						( file-close ) \ CLOSE FILE						( bindq *files ( rest *files ) )						( if.true	( and?  ( first *seqres )											( second *seqres ) ) \ hit ATOM									( bindq *files nil ) )						( if.true	( and?  ( first *helix )									( second *helix ) )			 \ hit ATOM									( bindq *files nil ) )						)End of Example}