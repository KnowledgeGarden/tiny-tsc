{	IMMUNE.RBTdescription:		Xneed to do:		Xto improve:		X	PROBLEMS:		Sense rules:  When are they properly usednotes:			Straighten out cytokine-cell interactions;  make sure cell activation				rules approrpiate; check runtime rule firing to insure that system is				operating properly/realistically!CHANGES:1/13/92			first draft1/16/92			additions2/22/92			began cleanup. NewCentury 12point, TabStops=4, LineWrap=100.				jp2: began trimming rules using new multi-fire QPT3/12/92			jp2: organize rules3/15/92			jp2: edit rules -- there's some bugs in here4/07/92			jp2: edit rules to new syntax5/29/92			jp2: edit rules -- one rule per major actor activity10/15/92			rbt: add rules for antibody, pathogens, stop on antibody production 				experiments with binding trimming10/18/92			rbt: various experiments, edit rules10/25/92			rbt: various experiments, edit rules through11/5/92			rbt: various experiments, edit rules12/18			rbt: thenSay and then.log added;  rules made verbose 1/11-13/93		rbt:  Looked for gremlins--made a lot of T- and b-cell rules					"one-shot":  Set initial conditions relations to false, and					only allowed rule to fire on relations false... e.g., b-cell					digests antigens.  Makes some biological sense, and should					cut down on branching!2/12/93			rbt:  eliminated useless proliferation rules; some minor changes2/22/93			jp2: patches to fix it2/24/93			jp2: patches to update to new TSC syntax3/02/93			jp2: no more false actors -- runs on TSC 0.2b129/18/93			rbt:  bacterium rules added; miscellaneous editing2/07/94			rbt:	Adding viral infection, CTL processes, MHCI bindings2/15/94			rbt:	Additional experiments setup2/16/94			rbt:	Changed all sense rules to process rules;  sense rules					found to eliminate branches befor they were fully and					properly expanded2/23/94			rbt:  Modified viral infection rule to eliminate macrophage; eliminated					redundant viral stop rule3/4/94			rbt:  Modified for popsim					} \ _________________________________________________________ SUPPORT OBJECTSc:	thenSay	subOf		informationSlot	instanceOf	rhs.func	iTake		sx	iGive		none	arguments	*something	algorithm	( display> *something say )\ ______________________________________________________________________  RULEScomment:all rules below have been setup to work with "no false actors".  This routine in QPTwill take any actor which is "false" and delete it from the episode, then it goes and findsany relation or state referencing that actor, and deletes that too.Thus, we spend more time using thenCreate to bind up "new" variables so we canintroduce new actors and their relations/states at runtime, plus we make heavy useof the "if.not..." constructs to keep rules from multiple firings.comment;\ ____________________________________________________________ BINDING PROCESSEScomment:	the "no false actors" issue propagates to the rule below:	unless we have a sense.rule which creates abuttments, we need to just ignore	abuttments (read: assume they exist).  this because we cannot have the relation	in initial conditions because we cannot have the actors	we did one experiment in the metabolic pathways project with sense rules which	notice the presence of a pair of actors, and notice they don't abut, then make them abut	I'm not sure what that all means, or how it is different from the idea of just ignoring	abuttments altogether, as the example below does.comment;\ replacement antigen.binding, prevents multiple branches from arising as\ t- b-cell and macrophage rules fire separatelyc:	antigen.BINDING	level		basic	subOf		phys.process	instanceOf	process.rule 	myCreator	jp2	context		human.immunology	ifActors		( ( antigen ( *antigen ) true )				  ( b-cell ( *b-cell ) true )			 	  ( helper.t-cell ( *helper.t-cell ) true )			  	  ( macrophage ( *macrophage ) true ) )	ifNotRelates	( ( binds ( *helper.t-cell *antigen ) true )				   ( binds ( *b-cell *antigen ) true )				   ( binds ( *macrophage *antigen ) true ) )	thenRelates	( ( binds ( *macrophage *antigen ) true )				  ( binds ( *helper.t-cell *antigen ) true ) 				  ( binds ( *b-cell *antigen ) true ) )	thenSay		" Antigen bound to macrophage, b-cell, and helper t-cell. " comment:	this rule does a good job of making an abuttment, but there may be a problem...	we cannot do an ifRelates on something which does not exist	so we choose the ifNotRelates relationcomment;c:	ACTIVATED.HELPER.T-CELL.b-cell.ABUT.1	level		basic	subOf		phys.process	instanceOf	process.rule  	myCreator	jp2 rbt	context		human.immunology	ifActors		( ( b-cell ( *b-cell ) true )				 ( act.h.t-cell ( *act.h.t-cell ) true ) )	\ ifRelates	( ( abuts ( *b-cell *act.h.t-cell ) false ) )   \ jp2	ifNotRelates ( ( abuts ( *b-cell *act.h.t-cell ) true ) )	thenRelates 	( ( abuts ( *b-cell *act.h.t-cell ) true ) ) 	thenSay		" b-cell abuts activated helper t-cell. "\ I suspect this is wrong--I recall reading that the ht-cell gets activated when it antigen-binds\ to a macrophage or b-cell presenting hla and antigen parts\c:	ACTIVATED.HELPER.T-CELL.antigen.b-cell.BINDING.1	level		basic	subOf		phys.process 	instanceOf	process.rule   \ rbt SENSE.RULE \ jp2	myCreator	jp2 rbt	context		human.immunology	ifActors		( ( b-cell ( *b-cell ) true )				  ( antigen ( *antigen ) true )	\ jp2 missing actor				 ( act.h.t-cell ( *act.h.t-cell ) true ) )	ifRelates		(  ( presents ( *b-cell *antigen ) true )				  ( abuts ( *b-cell *act.h.t-cell ) true ) )	ifNotRelates  ( ( antigenBinds ( *act.h.t-cell *b-cell ) false ) ) 	thenRelates 	( ( antigenBinds ( *act.h.t-cell *b-cell ) true ) )\	thenActors	( ( b-cell ( *b-cell ) true ) )			\ jp2	thenSay		" Activated helper t-cell binds b-cell bound antigen."	\ ____________________________________________________________ TRANSPORT PROCESSES\ made these rules one-shot by testing for false relation on primary output relation\ rbt 1/11/93\ modified to use the ifNotRelates method--jp2 3/02/93c:	antigen.INTERNALIZATION.B	level		basic	subOf		phys.process	instanceOf	process.rule  	myCreator	rbt 	context		human.immunology	ifActors		( ( antigen ( *antigen ) true )			 	 ( b-cell ( *b-cell ) true ) )	ifRelates		( ( binds ( *b-cell *antigen ) true ) )	ifNotRelates	( ( contains ( *b-cell *antigen ) true ) ) 	thenRelates	( ( contains ( *b-cell *antigen ) true ) )	thenSay		" b-cell ingests bound antigen. "c:	antigen.INTERNALIZATION.M	level		basic	subOf		phys.process	instanceOf	process.rule  	myCreator	rbt 	context		human.immunology	ifActors		( ( antigen ( *antigen ) true )			 	 ( macrophage ( *macrophage ) true ) )	ifRelates		( ( binds ( *macrophage *antigen ) true ) )	ifNotRelates	( ( contains ( *macrophage *antigen ) true ) )	thenRelates 	( ( contains ( *macrophage *antigen ) true ) )	thenSay		" Macrophage ingests bound antigen. "	c:	antigen.PRESENTATION.B	level		basic	subOf		phys.process	instanceOf	process.rule  	myCreator	rbt	context		human.immunology	ifActors		( ( b-cell ( *b-cell ) true )				   ( antigen ( *antigen ) true ) )	ifRelates		( ( digests ( *b-cell *antigen ) true ) )	ifNotRelates	( ( presents ( *b-cell *antigen ) true ) )	thenRelates 	( ( presents ( *b-cell *antigen ) true ) ) 	thenSay		" b-cell presents processed antigen. "c:	antigen.PRESENTATION.M	level		basic	subOf		phys.process	instanceOf	process.rule  	myCreator	rbt	context		human.immunology	ifActors		( ( Macrophage ( *macrophage ) true )				   ( antigen ( *antigen ) true ) )	ifRelates		( ( digests ( *macrophage *antigen ) true ) )	ifNotRelates	( ( presents ( *macrophage *antigen ) true ) )	thenRelates 	( ( presents ( *macrophage *antigen ) true ) ) 	thenSay		" Macrophage presents processed antigen. "	c:	V.antigen.PRESENTATION.M	level		basic	subOf		phys.process	instanceOf	process.rule  	myCreator	rbt	context		human.immunology	ifActors		( ( i.macrophage ( *i.macrophage ) true )				   ( v.antigen ( *v.antigen ) true )				   ( mmhc1 ( *mhc1 ) true ) 				   ( virus ( *virus ) true ) )							   	ifRelates		( ( infects ( *virus *i.macrophage ) true )				  ( binds ( *mhc1 *v.antigen ) true )  )	ifNotRelates	( ( presents ( *i.macrophage *v.antigen ) true ) )		  				  				    	thenRelates 	( ( presents ( *i.macrophage *v.antigen ) true ) ) 	thenSay		" Infected macrophage presents viral antigen/peptide. "	\ ____________________________________________________________ METABOLIC PROCESSESc:	MACROPHAGE.mhc1.BINDING	level		basic	subOf		phys.process	instanceOf	process.rule   	myCreator	rbt	context		human.immunology	ifActors		( ( i.macrophage ( *i.macrophage ) true )				   ( v.antigen ( *v.antigen ) true ) 				   ( virus ( *virus ) true ) )							   	ifRelates		( ( infects ( *virus *i.macrophage ) true )  )	ifNotRelates	( ( binds ( *mhc1 *v.antigen ) true ) )	thenCreate	( *mmhc1 )	thenActors	( ( mmhc1 ( *mhc1 ) true ) )	thenRelates	( ( binds ( *mhc1 *v.antigen ) true ) )	thenSay		" Macrophage mhc1 binds viral antigen/peptide. "c:	antigen.PROCESSING.M	level		basic	subOf		phys.process	instanceOf	process.rule  	myCreator	rbt	context		human.immunology	ifActors		( ( antigen ( *antigen ) true )				\  ( il-1 ( *il-1 ) false )			-- no more "false" actors				\  ( gm-csf ( *csf ) false )				  ( Macrophage ( *macrophage ) true ) )	ifRelates		( ( contains ( *macrophage *antigen ) true ) )	ifNotRelates	( ( digests ( *macrophage *antigen ) true ) )	thenCreate	( *il-1 *csf )			\ get ready to make new actors	thenActors	( ( il-1 ( *il-1 ) true )				 ( gm-csf ( *csf ) true ) )				 	thenRelates 	(  ( digests ( *macrophage *antigen ) true )				  ( secretes ( *macrophage *il-1 ) true ) 			 	  ( secretes ( *macrophage *csf ) true ) )	thenSay		" Macrophage secretes il-1 and CSF. "c:	antigen.PROCESSING.B	level		basic	subOf		phys.process	instanceOf	process.rule  	myCreator	rbt	context		human.immunology	ifActors		( ( b-cell ( *b-cell ) true )				   ( antigen ( *antigen ) true ) )	ifRelates		( ( contains ( *b-cell *antigen ) true ) )	ifNotRelates	( ( digests ( *b-cell *antigen ) true ) )	\ make this rule one-shot	thenRelates 	( ( digests ( *b-cell *antigen ) true ) ) 	thenSay		" b-cell digests antigen. "	\ what about proliferation???  what does PROLIFERATES mean?\c:	HELPER.T-CELL.ACTIVATION.1	level		basic	subOf		phys.process	instanceOf	process.rule   \ SENSE.RULE	myCreator	jp2 rbt	context		human.immunology	ifActors		( ( antigen ( *antigen ) true )			  	 ( helper.t-cell ( *helper.t-cell ) true )				\ ( act.h.t-cell ( *act.h.t-cell ) false )	-- no "false" actors				 ( il-1 ( *il-1 ) true ) )	ifRelates		( ( binds ( *helper.t-cell *antigen ) true ) )	ifNotActors	( ( act.h.t-cell ( *act.h.t-cell ) true ) )	thenCreate	( *act.h.t-cell )	thenRelates 	( ( proliferates ( *helper.t-cell ) true ) )		thenActors	( ( act.h.t-cell ( *act.h.t-cell ) true ) )	thenSay		" *Helper t-cell activated. "		\	New rule for cytotoxic t-cell activationc:	C.T-CELL.ACTIVATION.1	level		basic	subOf		phys.process	instanceOf	process.rule  	myCreator	rbt	context		human.immunology	ifActors		( ( v.antigen ( *v.antigen ) true )			  	 ( c.t-cell ( *c.t-cell ) true )				 ( virus ( *virus ) true )				 ( i.macrophage ( *i.macrophage ) true )				  ( mmhc1 ( *mhc1 ) true ) )	ifNotActors	( ( act.c.t-cell ( *act.c.t-cell ) true ) )				  	ifRelates		( ( presents ( *i.macrophage *v.antigen ) true ) ) 	thenCreate	( *act.c.t-cell )	thenActors	( ( act.c.t-cell ( *act.c.t-cell ) true ) )		thenSay		" *Cytotoxic t-cell activated. "			   	c:	b-cell.ACTIVATION.1	level		basic	subOf		phys.process	instanceOf	process.rule   \ SENSE.RULE			\ NOTE new syntax here	myCreator	jp2 rbt	context		human.immunology	ifActors		( ( b-cell ( *b-cell ) true )				  ( act.h.t-cell ( *act.h.t-cell ) true ) )	ifRelates		( ( antigenBinds ( *act.h.t-cell *b-cell ) true ) )	ifNotActors	( ( activated.b-cell ( *b-cell ) true ) )	thenActors	( ( activated.b-cell ( *b-cell ) true ) )			thenSay		" b-cell activated. "	   c:	b-cell.CYTOKINE.RECEPTOR.PRODUCTION.1	level		basic	subOf		phys.process	instanceOf	process.rule  	myCreator	jp2 rbt	context		human.immunology	ifActors		( ( activated.b-cell ( *b-cell ) true )				 \ ( cytokine.receptor  ( *cytokine.receptor ) false )  -- no "false" actors				  ( il-1 ( *il-1 ) true ) )	ifNotActors	( ( cytokine.receptor  ( *cytokine.receptor ) true ) )	\ prevent refiring	thenCreate	( *cytokine.receptor )	thenActors	( ( cytokine.receptor  ( *cytokine.receptor ) true ) )			thenRelates	( ( synthesizes ( *b-cell *cytokine.receptor ) true ) 			 	  ( attaches.to (  *il-1 *cytokine.receptor ) true ) )	thenSay		" b-cell synthesizes cytokine receptor, and il-1 attaches to receptor. "	   \ ATTACHES.TO  & BINDS seem to be very similar usage here--compare to SRL's LINKS\	ATTACHES.TO should probably be attachedTo\ ____________________________________________________________ PROLIFERATION PROCESSESc:	BLAST.CELL.PRODUCTION.1	level		basic	subOf		phys.process	instanceOf	process.rule   \ SENSE.RULE	myCreator	jp2 rbt	context		human.immunology	ifActors		( ( activated.b-cell ( *b-cell ) true )				   ( il-1 ( *il-1) true )				   ( cytokine.receptor ( *cytokine.receptor ) true ) 				   \  ( blast.cell ( *blast.cell ) false ) 				    )	ifRelates		( ( synthesizes ( *b-cell *cytokine.receptor ) true ) 			  	 ( attaches.to ( *il-1 *cytokine.receptor ) true ) )	ifNotActors	( ( blast.cell ( *blast.cell ) true ) )	thenCreate	( *blast.cell )	thenActors	( ( blast.cell ( *blast.cell ) true ) )	thenSay		" Blast cell produced. "	c:	PLASMA.MEMORY.CELL.PRODUCTION.1	level		basic	subOf		phys.process	instanceOf	process.rule  	myCreator	jp2 rbt	context		human.immunology	ifActors		( (  blast.cell ( *blast.cell ) true ) 				   ( il-1 ( *il-1 ) true )				  \ ( plasma.cell ( *plasma.cell ) false )			   	   \ ( memory.cell ( *memory.cell ) false )			   	   )	ifNotActors	( ( plasma.cell ( *plasma.cell ) true )			   		  ( memory.cell ( *memory.cell ) true ) )	thenCreate	( *plasma.cell *memory.cell )	thenActors	( ( plasma.cell ( *plasma.cell ) true )				  ( memory.cell ( *memory.cell ) true ) )	thenSay		" Plasma cell produced.  Memory cell produced. "			   	  		\ __________________________________________________ANTIBODY PRODUCTIONc:	ANTIBODY.PRODUCTION.1	level		basic	subOf		phys.process	instanceOf	process.rule   \ SENSE.RULE	myCreator	rbt	context		human.immunology	ifActors		( ( il-1 ( *il-1 ) true )			   	( cytokine.receptor ( *cytokine.receptor ) true )			   	( plasma.cell ( *plasma.cell ) true ) )	ifRelates		( ( attaches.to ( *il-1 *cytokine.receptor ) true ) )	ifNotActors	( ( antibody ( *antibody ) true ) )	thenCreate	( *antibody )	thenActors	( ( antibody ( *antibody ) true ) )	thenSay		" Plasma cell produces antibody. "			    \ ___________________________________________________INFECTIOUS AGENT PROCESSEScomment:	this rule has a problem with the "no false actors" syntax rule:		without antigen as actor, you cannot use the "excretes" relation here to limit firing	that is: we need some sort of unary relation for virus which will get changed on firing	I choose--for purposes of trials--"excited"	note that this has been added to initial conditions as well	second cut: i choose ifNotActors, and deleted "excited" from ICcomment;c:	VIRAL.INFECTION.M	level			basic	subOf			phys.process	instanceOf		process.rule  	myCreator		rbt	context			human.immunology	ifActors			( ( virus ( *virus ) true )					  ( macrophage ( *macrophage ) true ) )	ifNotActors		( ( v.antigen ( *v.antigen ) true )					  ( i.macrophage ( *i.macrophage ) true ) )				  	ifNotRelates		( ( infects ( *virus *i.macrophage ) true ) )	thenCreate		 ( *v.antigen ) ( *i.macrophage ) 	thenActors		( ( v.antigen ( *v.antigen ) true )					  ( i.macrophage ( *i.macrophage ) true ) 					  ( macrophage ( *macrophage ) false ) )  \ rbt: added to make "not normal" macrophage	thenRelates		( ( infects ( *virus *i.macrophage ) true ) )	thenSay			" Virus infects macrophage. "	{c:	VIRAL.antigen.PRODUCTION	level		basic	subOf		phys.process	instanceOf	process.rule  	myCreator	rbt	context		human.immunology	ifActors		( ( virus ( *virus ) true ) )	ifRelates		( ( excretes ( *virus *antigen ) false ) )	ifNotActors	( ( antigen ( *antigen ) true ) )	thenCreate	( *antigen )	thenActors	( ( antigen ( *antigen ) true ) )	thenRelates	( ( excretes ( *virus *antigen ) true ) )	thenSay		( Virus excretes antigen. )	}c:	BACTERIAL.antigen.PRODUCTION.1	level		basic	subOf		phys.process	instanceOf	process.rule  	myCreator	rbt	context		human.immunology	ifActors		( ( bacterium ( *bacterium ) true ) )\	ifRelates		( ( excretes ( *bacterium *antigen ) false ) )	ifNotActors	( ( antigen ( *antigen ) true ) )	thenCreate	( *antigen )	thenActors	( ( antigen ( *antigen ) true ) )	thenRelates	( ( excretes ( *bacterium *antigen ) true ) )	thenSay		" Bacterium excretes antigen. "	{c:	BACTERIAL.antigen.PRODUCTION.2	level		basic	subOf		phys.process	instanceOf	process.rule  	myCreator	rbt	context		human.immunology	ifActors		( ( bacterium ( *bacterium ) true ) )\	ifRelates		( ( excretes ( *bacterium *bacterial.antigen ) false ) )	ifNotActors	( ( bacterial.antigen ( *bacterial.antigen ) true ) )	thenCreate	( *bacterial.antigen )	thenActors	( ( bacterial.antigen ( *bacterial.antigen ) true ) )	thenRelates	( ( excretes ( *bacteria *bacterial.antigen ) true ) )	thenSay		( Bacterium excretes bacterial antigen. )	}		\ _________________________________________ANTIBODY-PATHOGEN BINDING PROCESSES	\ next rule does not adress the fact that antigen is related--bound--to virus{c:	ANTIBODY.VIRUS.antigen.BINDING.1	level		basic	subOf		phys.process	instanceOf	process.rule   \ SENSE.RULE	myCreator	jp2 rbt	context		human.immunology	ifActors		( ( antibody ( *antibody ) true )				 ( virus ( *virus ) true ) )	ifNotRelates ( ( binds ( *antibody *virus ) true ) )	\ added to make it run faster	thenRelates	( ( binds ( *antibody *virus ) true ) )	thenSay		" Antibody binds to virus. "}	c:	ANTIBODY.BACTERIUM.antigen.BINDING.1	level		basic	subOf		phys.process	instanceOf	process.rule   \ SENSE.RULE	myCreator	rbt	context		human.immunology	ifActors		( ( antibody ( *antibody ) true )				 ( bacterium ( *bacterium ) true ) )	ifNotRelates	( ( binds ( *antibody *bacterium ) true ) )	\ added to make it run faster	thenRelates	( ( binds ( *antibody *bacterium ) true ) )	thenSay		" Antibody binds to bacterium. "	\ _________________________________________INFECTED CELL LYSIS\ ***A STOP RULEc:	I.MACROPHAGE.LYSIS.1	level			basic	subOf			phys.process	instanceOf		process.rule  	myCreator		rbt	context			human.immunology	ifActors			( ( v.antigen ( *v.antigen ) true )				 	  ( virus ( *virus ) true )				 	  ( i.macrophage ( *i.macrophage ) true )				 	  ( act.c.t-cell ( *act.c.t-cell ) true ) )	ifNotRelates		( ( lyses ( *act.c.t-cell ) ( *i.macrophage ) true ) )	thenActors	( ( v.antigen ( *v.antigen ) false )				 	  ( virus ( *virus ) false ) )		   	thenRelates		( ( lyses ( *act.c.t-cell ) ( *i.macrophage ) true ) )	thenTerminate	expansion	thenSay		" ***Cytotoxic t-cell lyses infected macrophage. "			\ ____________________________________________________________ STOPPING RULEScomment:you can write stopping rules to halt construction of the envisionmentthis is a model of such a type of rulesome stopping rules are used when a branch of the tree is known to be unproductiveothers simply stop when some goal state is reachedcomment;\ stop when macrophage ingests antibody bound virus rbt--1015{c:	VIRAL.INGESTION.STOP.1	level		basic	subOf		phys.process	instanceOf	process.rule   \ SENSE.RULE \ dropped sense.rule until QPT code patched	myCreator	rbt	context		human.immunology	ifActors		( ( antibody ( *antibody ) true )				 ( virus ( *virus ) true )				 ( macrophage ( *macrophage ) true ) )	ifRelates		( ( binds ( *antibody *virus )  true ) )	ifNotRelates	( ( ingests ( *macrophage *virus ) true ) )	thenActors	( ( virus ( *virus ) false ) )	\ jp2--will be killed by QPT **	thenRelates	( ( ingests ( *macrophage *virus ) true)				  )			 	thenTerminate	expansion	thenSay		" ***Macrophage ingests antibody-bound virus. "	}\ stop when macrophage ingests anitbody-bound bacterium rbt--0918c:	BACTERIUM.INGESTION.1	level		basic	subOf		phys.process	instanceOf	SENSE.RULE   	myCreator	rbt	context		human.immunology	ifActors			( ( antibody ( *antibody ) true )					 ( bacterium ( *bacterium ) true )					 ( macrophage ( *macrophage ) true ) )	ifRelates			( ( binds ( *antibody *bacterium )  true ) )	ifNotRelates		( ( ingests ( *macrophage *bacterium ) true ) )	thenRelates		( ( ingests ( *macrophage *bacterium ) true )  )	thenTerminate	expansion		thenSay		" ***Macrophage ingests antibody-bound bacterium. "		