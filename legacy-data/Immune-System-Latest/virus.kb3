\ my.creator  jwp\ -----------------------------------------\ virus.kb1		( female.splenocytes and emcv.d)\ -----------------------------------------c:	adhere->abuts	level		basic	sub.of		phys.process	instance.of	sense.rule	my.creator	JAR	context		immunology	if.actors			( ( thing ( *t1 ) true )						( thing ( *t2 ) true ) ) 	if.relates			( ( adhere ( *t1 *t2 ) true ) ) 	then.relates		( ( abuts ( *t1 *t2 ) true ) ) c:	splenocyte.cell.types		level		basic		sub.of		idea		instance.of sense.rule		if.actors		  ( ( splenocyte ( *splenocyte ) true ) )		then.actors		  ( ( macrophage ( *macrophage ) true )						  \ ( helper.T-cell ( *helper.T-cell ) true )						  ( helper.T1-cell ( *helper.T1-cell ) true )						  ( helper.T2-cell ( *helper.T2-cell ) true )						  ( cytotoxic.T-cell ( *cytotoxic.T-cell ) true )						  ( B-cell ( *B-cell ) true )						  ( NK-cell ( *NK-cell ) true ) )						  						  c:	aa.virus.abuts.macrophage		level			basic		sub.of			phys.process		instance.of 	process.rule 		if.actors 		( ( virus ( *emcv-d ) true )						( macrophage ( *macrophage ) true ) )		\ then.relates    ( ( abuts ( *emcv-d *macrophage ) true ) )		then.states		( ( abutted ( *macrophage ) true ) )		\ then.create		( *abutted.macrophage )		then.actors   	( ( abutted.macrophage ( *abutted.macrophage ) true )						( virus ( *emcv-d ) false ) 						( macrophage ( *macrophage ) false ) )		then.say		"  virus abuts macrophage xyz "										  c:  ba.virus.binding.macrophage	level  		basic	sub.of		phys.process	instance.of process.rule \ popsim.rule	my.creator jwp njb	context 	immunology	  		\ ( ( virus ( *emcv-d ) true ) 	if.actors				( ( abutted.macrophage ( *abutted.macrophage ) true ) )	\ if.relates		( (  abuts ( *macrophage *emcv-d ) true ) )	\ if.states 		( ( abutted ( *macrophage ) true ) )	\ if.not.relates  ( ( binds ( *abutted.macrophage *emcv-d) true ) )	\ if.not.states 	( ( bound ( *abutted.macrophage ) true ) )			\ then.relates  	( ( binds ( *abutted.macrophage *emcv-d) true ) )	then.states  	( ( bound ( *abutted.macrophage ) true ) )	\ then.create		( *bound.macrophage )	then.actors   	( ( bound.macrophage ( *bound.macrophage ) true )										( abutted.macrophage ( *abutted.macrophage ) false ) )	then.say		" virus binds to macrophage  xyz. "		c:	ca.virus.penetrates.macrophage		level			basic		sub.of			phys.process		instance.of		process.rule 		 		\ ( ( virus ( *emcv-d ) true )		if.actors				( ( bound.macrophage ( *bound.macrophage ) true ) )		\ if.relates		( (  binds ( *abutted.macrophage *emcv-d ) true ) )		\ if.states 		( ( bound ( *abutted.macrophage ) true ) )		\ if.not.relates  ( ( penetrates ( *bound.macrophage *emcv-d) true ) )		\ if.not.states 	( ( penetrated ( *bound.macrophage ) true ) )		\ then.relates    ( ( penetrates ( *bound.macrophage *emcv-d) true ) )		then.states 	( ( penetrated ( *bound.macrophage ) true ) )		then.actors		( ( penetrated.macrophage ( *penetrated.macrophage ) true ) 												( bound.macrophage ( *bound.macrophage ) false ) )		then.say		"  virus penetrates macrophage  xyz "		c:	da.virus.induces.macrophage		level			basic		sub.of			phys.process		instance.of		process.rule			\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( penetrated.macrophage ( *penetrated.macrophage ) true ) )		\ if.relates		( (  penetrates ( *bound.macrophage *emcv-d ) true ) )		\ if.states 		( ( penetrated ( *bound.macrophage ) true ) )		\ if.not.relates  ( ( induces ( *penetrated.macrophage *emcv-d ) true ) )		\ if.not.states 	( ( induced ( *penetrated.macrophage ) true ) )		\ then.relates    ( ( induces ( *penetrated.macrophage *emcv-d ) true ) )		then.states 	( ( induced ( *penetrated.macrophage ) true ) )		then.actors		( ( induced.macrophage ( *induced.macrophage ) true ) 						( penetrated.macrophage ( *penetrated.macrophage ) false ) )		then.say		"  virus induces macrophage xyz "									c:	ea.virus.activates.macrophage		level			basic		sub.of			phys.process		instance.of		process.rule 					\ ( ( virus ( *emcv-d ) true )		if.actors 				( ( induced.macrophage ( *induced.macrophage ) true ) )		\ if.relates		( ( induces ( *penetrated.macrophage *emcv-d ) true ) )		\ if.states 		( ( induced ( *penetrated.macrophage ) true ) )		\ if.not.relates  ( ( activates ( *induced.macrophage *emcv-d ) true ) )		\ if.not.states 	( ( activated ( *induced.macrophage ) true ) )		\ then.relates    ( ( activates ( *induced.macrophage *emcv-d ) true ) )		then.states    	( ( activated ( *induced.macrophage ) true ) )		then.actors   	( ( activated.macrophage ( *activated.macrophage ) true ) 												( induced.macrophage ( *induced.macrophage ) false ) )		then.say		"  virus activates macrophage  xyz "		c:	ANTIGEN.PRESENTATION.M	level		basic	sub.of		phys.process	instance.of	process.rule \ popsim.rule	my.creator	rbt jwp	context		immunology	if.actors		( ( activated.macrophage ( *activated.macrophage ) true ) )	\ if.not.relates	( ( presents ( *activated.macrophage *antigen ) true ) )	\ then.relates 	( ( presents ( *activated.macrophage *antigen ) true ) )	then.actors		( ( activated.macrophage.1 ( *activated.macrophage.1 ) true )					( activated.macrophage ( *activated.macrophage ) false ) )   	then.say		" Macrophage presents processed antigen. "		c: faa.macrophage.secretes.cytokine.zero		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.macrophage.1 ( *activated.macrophage.1 ) true )							( female.mouse ( *female.mouse ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.macrophage *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.macrophage ) true ) ) 		\ then.create    	( *TGF-beta *TNF-alpha *IL-12 *IL-10 *IL-8 *IL-6 *IL-1 )				\ ( ( TGF-beta ( *TGF-beta ) true )		 				\ ( TNF-alpha ( *TNF-alpha ) true ) 		 				\ ( IL-12 ( *IL-12 ) true )		 				\ ( IL-10 ( *IL-10 ) true )		 				\ ( IL-8 ( *IL-8 ) true )		 				\ ( IL-6 ( *IL-6 ) true )		 				\ ( IL-1 ( *IL-1 ) true )		then.actors 	( ( three.hours ( *three.hours ) true )						( activated.macrophage.3.hr ( *activated.macrophage.3.hr ) true )		 				( activated.macrophage.1 ( *activated.macrophage.1 ) false ) )		then.say		"macrophage secretes cytokines "		 c: fab.macrophage.secretes.cytokine.three		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.macrophage.3.hr ( *activated.macrophage.3.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( three.hours ( *three.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.macrophage *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.macrophage ) true ) )		then.create    	( *IL-12 )		then.relates    ( ( secretes ( *IL-12 *activated.macrophage.3.hr ) true ) )		then.states    	( ( secreting ( *IL-12 *activated.macrophage.3.hr ) true ) ) 		then.actors		( ( IL-12 ( *IL-12 ) true )		 				( six.hours ( *six.hours ) true ) 		 				( activated.macrophage.6.hr ( *activated.macrophage.6.hr ) true )		 				( activated.macrophage.3.hr ( *activated.macrophage.3.hr ) false ) 		 				( three.hours ( *three.hours ) false ) ) 		then.say		"activated macrophage secretes IL-12 at three hours post infection "		c: fac.macrophage.secretes.cytokine.six		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.macrophage.6.hr ( *activated.macrophage.6.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( six.hours ( *six.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.macrophage *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.macrophage ) true ) ) 		then.relates    ( ( secretes ( *IL-12 *activated.macrophage.6.hr ) true ) 						( secretes ( *IL-10 *activated.macrophage.6.hr ) true ) )		then.states    	( ( secreting ( *IL-12 *activated.macrophage.6.hr ) true )						( secreting ( *IL-10 *activated.macrophage.6.hr ) true ) )		then.create    	( *IL-12  *IL-10 )		then.actors		( ( IL-12 ( *IL-12 ) true )						( IL-10 ( *IL-10 ) true )		 				( nine.hours ( *nine.hours ) true )		 				( activated.macrophage.9.hr ( *activated.macrophage.9.hr ) true ) 		 				( activated.macrophage.6.hr ( *activated.macrophage.6.hr ) false )		 				( six.hours ( *six.hours ) false ) ) 		then.say		"activated.macrophage secretes IL-12 and IL-10 at six hours post infection "				c: fac.macrophage.secretes.cytokine.nine		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.macrophage.9.hr ( *activated.macrophage.9.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( nine.hours ( *nine.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.macrophage *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.macrophage ) true ) ) 		then.relates    ( ( secretes ( *IL-10 *activated.macrophage.9.hr ) true ) 						)		then.states    	( ( secreting ( *IL-10 *activated.macrophage.9.hr ) true )						)		then.create    	(  *IL-10 )		then.actors		( ( IL-12 ( *IL-12 ) false )						( IL-10 ( *IL-10 ) true )		 				( 24.hours ( *24.hours ) true )		 				( activated.macrophage.24.hr ( *activated.macrophage.24.hr ) true ) 		 				( activated.macrophage.9.hr ( *activated.macrophage.9.hr ) false )		 				( nine.hours ( *nine.hours ) false ) ) 		then.say		"activated.macrophage secretes IL-10 and not IL-12 at nine hours post infection "				c: fac.macrophage.secretes.cytokine.24		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.macrophage.24.hr ( *activated.macrophage.24.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( 24.hours ( *24.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.macrophage *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.macrophage ) true ) ) 		then.relates    ( ( secretes ( *IL-10 *activated.macrophage.24.hr ) true ) 						)		then.states    	( ( secreting ( *IL-10 *activated.macrophage.24.hr ) true )						)		then.create    	(  *IL-10 )		then.actors		( 						( IL-10 ( *IL-10 ) true )		 				( activated.macrophage.24.hr ( *activated.macrophage.24.hr ) false )		 				( 24.hours ( *24.hours ) false ) ) 		then.say		"activated.macrophage secretes IL-10 at 24 hours post infection "																																c:	ab.virus.abuts.helper.T1-cell		level			basic		sub.of			phys.process		instance.of 	process.rule 		if.actors 		( ( virus ( *emcv-d ) true )						( helper.T1-cell ( *helper.T1-cell ) true ) )		\ then.relates    ( ( abuts ( *helper.T1-cell *emcv-d ) true ) )		then.states     ( ( abutted ( *helper.T1-cell ) true ) )		then.actors   	( ( abutted.helper.T1-cell ( *abutted.helper.T1-cell ) true )						( virus ( *emcv-d ) false ) 						( helper.T1-cell ( *helper.T1-cell ) false ) )		then.say		"  virus abuts helper.T1-cell xyz "			c:  bb.virus.binding.helper.T1-cell	level  		basic	sub.of		phys.process	instance.of process.rule \ popsim.rule	my.creator jwp njb	context 	immunology	 \ 		( ( virus ( *emcv-d ) true ) 	if.actors				( ( abutted.helper.T1-cell ( *abutted.helper.T1-cell ) true ) )	\ if.relates		( (  abuts ( *helper.T1-cell *emcv-d ) true ) )	\ if.states 		( ( abutted ( *helper.T1-cell ) true ) )	\ if.not.relates  ( ( binds ( *abutted.helper.T1-cell *emcv-d ) true ) )	\ if.not.states 	( ( bound ( *abutted.helper.T1-cell ) true ) )			\ then.relates  	( ( binds ( *abutted.helper.T1-cell *emcv-d ) true ) )	then.states  	( ( bound ( *abutted.helper.T1-cell ) true ) )	\ then.create     ( *bound.helper.T1.cell )	then.actors   	( ( bound.helper.T1-cell ( *bound.helper.T1-cell ) true ) 										( abutted.helper.T1-cell ( *abutted.helper.T1-cell ) false ) )	then.say		" virus binds to helper.T1-cell  xyz. "	c:	cb.virus.penetrates.helper.T1-cell		level			basic		sub.of			phys.process		instance.of		process.rule 		\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( bound.helper.T1-cell ( *bound.helper.T1-cell ) true ) )		\ if.relates		( (  binds ( *abutted.helper.T1-cell *emcv-d ) true ) )		\ if.states 		( ( bound ( *abutted.helper.T1-cell ) true ) )		\ if.not.relates  ( ( penetrates ( *bound.helper.T1-cell *emcv-d ) true ) )		\ if.not.states 	( ( penetrated ( *bound.helper.T1-cell ) true ) )		\ then.relates    ( ( penetrates ( *bound.helper.T1-cell *emcv-d ) true ) )		then.states 	( ( penetrated ( *bound.helper.T1-cell ) true ) )		then.actors		( ( penetrated.helper.T1-cell ( *penetrated.helper.T1-cell ) true )												( bound.helper.T1-cell ( *bound.helper.T1-cell ) false ) )		then.say		"  virus penetrates helper.T1-cell  xyz "		c:	db.virus.induces.helper.T1-cell		level			basic		sub.of			phys.process		instance.of		process.rule			\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( penetrated.helper.T1-cell ( *penetrated.helper.T1-cell ) true ) )		\ if.relates		( (  penetrates ( *bound.helper.T1-cell *emcv-d ) true ) )		\ if.states 		( ( penetrated ( *bound.helper.T1-cell ) true ) )		\ if.not.relates  ( ( induces ( *penetrated.helper.T1-cell *emcv-d ) true ) )		\ if.not.states 	( ( induced ( *penetrated.helper.T1-cell ) true ) )		\ then.relates    ( ( induces ( *penetrated.helper.T1-cell *emcv-d ) true ) )		then.states 	( ( induced ( *penetrated.helper.T1-cell ) true ) )		then.actors		( ( induced.helper.T1-cell ( *induced.helper.T1-cell ) true ) 						( penetrated.helper.T1-cell ( *penetrated.helper.T1-cell ) false ) )		then.say		"  virus induces helper.T1-cell to secrete cytokines xyz "																		c:	eb.virus.activates.helper.T1-cell		level			basic		sub.of			phys.process		instance.of		process.rule 			\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( induced.helper.T1-cell ( *induced.helper.T1-cell ) true ) )		\ if.relates		( ( induces ( *penetrated.helper.T1-cell *emcv-d ) true ) )		\ if.states 		( ( induced ( *penetrated.helper.T1-cell ) true ) )		\ if.not.relates  ( ( activates ( *induced.helper.T1-cell *emcv-d ) true ) )		\ if.not.states 	( ( activated ( *induced.helper.T1-cell ) true ) )		\ then.relates    ( ( activates ( *induced.helper.T1-cell *emcv-d ) true ) )		then.states   	( ( activated ( *induced.helper.T1-cell ) true ) )		then.actors   	( ( activated.helper.T1-cell ( *activated.helper.T1-cell ) true ) 												( induced.helper.T1-cell ( *induced.helper.T1-cell ) false ) )		then.say		"  virus activates helper.T1-cell  xyz "		c: fba.helper.T1-cell.secretes.cytokine.zero		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.helper.T1-cell ( *activated.helper.T1-cell ) true )							( female.mouse ( *female.mouse ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.helper.T1-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.helper.T1-cell ) true ) ) 		\ then.create    	( *TGF-beta *TNF-alpha *IL-12 *IL-10 *IL-8 *IL-6 *IL-1 )				\ ( ( TGF-beta ( *TGF-beta ) true )		 				\ ( TNF-alpha ( *TNF-alpha ) true ) 		 				\ ( IL-12 ( *IL-12 ) true )		 				\ ( IL-10 ( *IL-10 ) true )		 				\ ( IL-8 ( *IL-8 ) true )		 				\ ( IL-6 ( *IL-6 ) true )		 				\ ( IL-1 ( *IL-1 ) true )		then.actors 	( ( three.hours ( *three.hours ) true )						( activated.helper.T1-cell.3.hr ( *activated.helper.T1-cell.3.hr ) true )		 				( activated.helper.T1-cell ( *activated.helper.T1-cell ) false ) )		then.say		"helper.T1-cell secretes cytokines "		 c: fbb.helper.T1-cell.secretes.cytokine.three		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.helper.T1-cell.3.hr ( *activated.helper.T1-cell.3.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( three.hours ( *three.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.helper.T1-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.helper.T1-cell ) true ) )		\ then.create    	( *IL-12 )		\ then.relates    ( ( secretes ( *IL-12 *activated.helper.T1-cell.3.hr ) true ) )		\ then.states    	( ( secreting ( *IL-12 *activated.helper.T1-cell.3.hr ) true ) ) 		then.actors		( 		 				( six.hours ( *six.hours ) true ) 		 				( activated.helper.T1-cell.6.hr ( *activated.helper.T1-cell.6.hr ) true )		 				( activated.helper.T1-cell.3.hr ( *activated.helper.T1-cell.3.hr ) false ) 		 				( three.hours ( *three.hours ) false ) ) 		then.say		"activated helper.T1-cell secretes ? at three hours post infection "		c: fbc.helper.T1-cell.secretes.cytokine.six		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.helper.T1-cell.6.hr ( *activated.helper.T1-cell.6.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( six.hours ( *six.hours ) true ) )		\				( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.helper.T1-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.helper.T1-cell ) true ) ) 		\ then.relates    ( ( secretes ( *IL-12 *activated.helper.T1-cell.6.hr ) true ) 		\ 				( secretes ( *IL-10 *activated.helper.T1-cell.6.hr ) true ) )		\ then.states    	( ( secreting ( *IL-12 *activated.helper.T1-cell.6.hr ) true )		\				( secreting ( *IL-10 *activated.helper.T1-cell.6.hr ) true ) )		then.actors		( ( nine.hours ( *nine.hours ) true )		 				( activated.helper.T1-cell.9.hr ( *activated.helper.T1-cell.9.hr ) true ) 		 				( activated.helper.T1-cell.6.hr ( *activated.helper.T1-cell.6.hr ) false )		 				( six.hours ( *six.hours ) false ) ) 		then.say		" activated.helper.T1-cell secretes ? at six hours post infection "				c: fbd.helper.T1-cell.secretes.cytokine.nine		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.helper.T1-cell.9.hr ( *activated.helper.T1-cell.9.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( nine.hours ( *nine.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.helper.T1-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.helper.T1-cell ) true ) ) 		\ then.relates    ( ( secretes ( *IL-10 *activated.helper.T1-cell.9.hr ) true ) 		\				)		\ then.states    	( ( secreting ( *IL-10 *activated.helper.T1-cell.9.hr ) true )		\				)		\  then.create    	(  *IL-10 )		then.actors		( 		 				( twelve.hours ( *twelve.hours ) true )		 				( activated.helper.T1-cell.12.hr ( *activated.helper.T1-cell.12.hr ) true ) 		 				( activated.helper.T1-cell.9.hr ( *activated.helper.T1-cell.9.hr ) false )		 				( nine.hours ( *nine.hours ) false ) ) 		then.say		"activated.helper.T1-cell secretes ? at nine hours post infection "	c: fbd.helper.T1-cell.secretes.cytokine.12		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.helper.T1-cell.12.hr ( *activated.helper.T1-cell.12.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( twelve.hours ( *twelve.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.helper.T1-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.helper.T1-cell ) true ) ) 		\ then.relates    ( ( secretes ( *IL-10 *activated.helper.T1-cell.9.hr ) true ) 		\ 				)		\ then.states    	( ( secreting ( *IL-10 *activated.helper.T1-cell.9.hr ) true )		\ 				)		\ then.create    	(  *IL-10 )		then.actors		( 		 				( 24.hours ( *24.hours ) true )		 				( activated.helper.T1-cell.24.hr ( *activated.helper.T1-cell.24.hr ) true ) 		 				( activated.helper.T1-cell.12.hr ( *activated.helper.T1-cell.12.hr ) false )		 				( nine.hours ( *nine.hours ) false ) ) 		then.say		"male splenocyte activated.helper.T1-cell does not secrete IFN-G at twelve hours post infection "			c: fbf.helper.T1-cell.secretes.cytokine.24		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.helper.T1-cell.24.hr ( *activated.helper.T1-cell.24.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( 24.hours ( *24.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.helper.T1-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.helper.T1-cell ) true ) ) 		\ then.relates    ( ( secretes ( *IL-10 *activated.helper.T1-cell.24.hr ) true ) 		\ 				)		\ then.states    	( ( secreting ( *IL-10 *activated.helper.T1-cell.24.hr ) true )		\ 				)		\ then.create    	(  *IL-10 )		then.actors		( 						( IL-10 ( *IL-10 ) true )		 				( activated.helper.T1-cell.24.hr ( *activated.helper.T1-cell.24.hr ) false )		 				( 24.hours ( *24.hours ) false ) ) 		then.say		"activated.helper.T1-cell secretes ? at 24 hours post infection "									c:	ac.virus.abuts.helper.T2-cell		level			basic		sub.of			phys.process		instance.of 	process.rule 		if.actors 		( ( virus ( *emcv-d ) true )						( helper.T2-cell ( *helper.T2-cell ) true ) )		\ then.relates    ( ( abuts ( *helper.T2-cell *emcv-d ) true ) )		then.states     ( ( abutted ( *helper.T2-cell ) true ) )		then.actors   	( ( abutted.helper.T2-cell ( *abutted.helper.T2-cell ) true )						( virus ( *emcv-d ) false ) 						( helper.T2-cell ( *helper.T2-cell ) false ) )		then.say		"  virus abuts helper.T2-cell xyz "				c:  bc.virus.binding.helper.T2-cell	level  		basic	sub.of		phys.process	instance.of process.rule \ popsim.rule	my.creator jwp njb	context 	immunology	 		\ ( ( virus ( *emcv-d ) true ) 	if.actors 				( ( abutted.helper.T2-cell ( *abutted.helper.T2-cell ) true ) )	\ if.relates		( (  abuts ( *helper.T2-cell *emcv-d ) true ) )	\ if.states 		( ( abutted ( *helper.T2-cell ) true ) )	\ if.not.relates  ( ( binds ( *abutted.helper.T2-cell *emcv-d ) true ) )	\ if.not.states 	( ( bound ( *abutted.helper.T2-cell ) true ) )			\ then.relates  	( ( binds ( *abutted.helper.T2-cell *emcv-d ) true ) )	then.states  	( ( bound ( *abutted.helper.T2-cell ) true ) )	\ then.create     ( *bound.helper.T2-cell )	then.actors   	( ( bound.helper.T2-cell ( *bound.helper.T2-cell ) true ) 										( abutted.helper.T2-cell ( *abutted.helper.T2-cell ) false ) )	then.say		" virus binds to helper.T2-cell  xyz. "										  		c:	cc.virus.penetrates.helper.T2-cell		level			basic		sub.of			phys.process		instance.of		process.rule 		\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( bound.helper.T2-cell ( *bound.helper.T2-cell ) true ) )		\ if.relates		( (  binds ( *abutted.helper.T2-cell *emcv-d ) true ) )		\ if.states 		( ( bound ( *abutted.helper.T2-cell ) true ) )		\ if.not.relates  ( ( penetrates ( *bound.helper.T2-cell *emcv-d ) true ) )		\ if.not.states 	( ( penetrated ( *bound.helper.T2-cell ) true ) )		\ then.relates    ( ( penetrates ( *bound.helper.T2-cell *emcv-d ) true ) )		then.states 	( ( penetrated ( *bound.helper.T2-cell ) true ) )		then.actors		( ( penetrated.helper.T2-cell ( *penetrated.helper.T2-cell ) true ) 						( bound.helper.T2-cell ( *bound.helper.T2-cell ) false ) )		then.say		"  virus penetrates helper.T2-cell xyz "		c:	dc.virus.induces.helper.T2-cell		level			basic		sub.of			phys.process		instance.of		process.rule 			\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( penetrated.helper.T2-cell ( *penetrated.helper.T2-cell ) true ) )		\ if.relates		( (  penetrates ( *bound.helper.T2-cell *emcv-d ) true ) )		\ if.states 		( ( penetrates ( *bound.helper.T2-cell ) true ) )		\ if.not.relates  ( ( induces ( *penetrated.helper.T2-cell *emcv-d ) true ) )		\ if.not.states 	( ( induced ( *penetrated.helper.T2-cell  ) true ) )		\ then.relates    ( ( induces ( *penetrated.helper.T2-cell *emcv-d ) true ) )		then.states 	( ( induced ( *penetrated.helper.T2-cell ) true ) )		then.actors		( ( induced.helper.T2-cell ( *induced.helper.T2.cell ) true ) 												( penetrated.helper.T2-cell ( *penetrated.helper.T2-cell ) false ) )		then.say		"  virus induces helper.T2-cell xyz "c:	ec.virus.activates.helper.T2-cell		level			basic		sub.of			phys.process		instance.of		process.rule 			\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( induced.helper.T2-cell ( *induced.helper.T2-cell ) true ) )		\ if.relates		( ( induces ( *penetrated.helper.T2-cell *emcv-d ) true ) )		\ if.states 		( ( induced ( *penetrated.helper.T2-cell ) true ) )		\ if.not.relates  ( ( activates ( *induced.helper.T2-cell *emcv-d ) true ) )		\ if.not.states 	( ( activated ( *induced.helper.T2-cell ) true ) )		\ then.relates    ( ( activates ( *induced.helper.T2-cell *emcv-d ) true ) )		then.states     ( ( activated ( *induced.helper.T2-cell ) true ) )		then.actors   	( ( activated.helper.T2-cell ( *activated.helper.T2-cell ) true ) 						( induced.helper.T2-cell ( *induced.helper.T2-cell ) false ) )		then.say		"  virus activates helper.T2-cell  xyz "		c: fca.helper.T2-cell.secretes.cytokine.zero		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.helper.T2-cell ( *activated.helper.T2-cell ) true )							( female.mouse ( *female.mouse ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.helper.T2-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.helper.T2-cell ) true ) ) 		\ then.create    	( *TGF-beta *TNF-alpha *IL-12 *IL-10 *IL-8 *IL-6 *IL-1 )				\ ( ( TGF-beta ( *TGF-beta ) true )		 				\ ( TNF-alpha ( *TNF-alpha ) true ) 		 				\ ( IL-12 ( *IL-12 ) true )		 				\ ( IL-10 ( *IL-10 ) true )		 				\ ( IL-8 ( *IL-8 ) true )		 				\ ( IL-6 ( *IL-6 ) true )		 				\ ( IL-1 ( *IL-1 ) true )		then.actors 	( ( three.hours ( *three.hours ) true )						( activated.helper.T2-cell.3.hr ( *activated.helper.T2-cell.3.hr ) true )		 				( activated.helper.T2-cell ( *activated.helper.T2-cell ) false ) )		then.say		"helper.T2-cell secretes cytokines "		 c: fcb.helper.T2-cell.secretes.cytokine.three		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.helper.T2-cell.3.hr ( *activated.helper.T2-cell.3.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( three.hours ( *three.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.helper.T2-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.helper.T2-cell ) true ) )		\ then.create    	( *IL-12 )		\ then.relates    ( ( secretes ( *IL-12 *activated.helper.T2-cell.3.hr ) true ) )		\ then.states    	( ( secreting ( *IL-12 *activated.helper.T2-cell.3.hr ) true ) ) 		then.actors		( ( IL-4 ( *IL-4 ) false )		 				( six.hours ( *six.hours ) true ) 		 				( activated.helper.T2-cell.6.hr ( *activated.helper.T2-cell.6.hr ) true )		 				( activated.helper.T2-cell.3.hr ( *activated.helper.T2-cell.3.hr ) false ) 		 				( three.hours ( *three.hours ) false ) ) 		then.say		"activated helper.T2-cell secretes ? at three hours post infection "		c: fcc.helper.T2-cell.secretes.cytokine.six		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.helper.T2-cell.6.hr ( *activated.helper.T2-cell.6.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( six.hours ( *six.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.helper.T2-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.helper.T2-cell ) true ) ) 		\     ( ( secretes ( *IL-12 *activated.helper.T2-cell.6.hr ) true ) 		then.relates	( ( secretes ( *IL-10 *activated.helper.T2-cell.6.hr ) true ) )		\     	( ( secreting ( *IL-12 *activated.helper.T2-cell.6.hr ) true )		then.states		( ( secreting ( *IL-10 *activated.helper.T2-cell.6.hr ) true ) )		then.create    	( *IL-10 )		then.actors		( 		 				( nine.hours ( *nine.hours ) true )		 				( activated.helper.T2-cell.9.hr ( *activated.helper.T2-cell.9.hr ) true ) 		 				( activated.helper.T2-cell.6.hr ( *activated.helper.T2-cell.6.hr ) false )		 				( six.hours ( *six.hours ) false ) ) 		then.say		"activated.helper.T2-cell secretes IL-10 at six hours post infection "				c: fcd.helper.T2-cell.secretes.cytokine.nine		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.helper.T2-cell.9.hr ( *activated.helper.T2-cell.9.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( nine.hours ( *nine.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.helper.T2-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.helper.T2-cell ) true ) ) 		then.relates    ( ( secretes ( *IL-10 *activated.helper.T2-cell.9.hr ) true ) 						)		then.states    	( ( secreting ( *IL-10 *activated.helper.T2-cell.9.hr ) true )						)		then.create    	( *IL-10 )		then.actors		( ( *IL-10 )		 				( twelve.hours ( *twelve.hours ) true )		 				( activated.helper.T2-cell.12.hr ( *activated.helper.T2-cell.12.hr ) true ) 		 				( activated.helper.T2-cell.9.hr ( *activated.helper.T2-cell.9.hr ) false )		 				( nine.hours ( *nine.hours ) false ) ) 		then.say		"activated.helper.T2-cell secretes IL-10 at nine hours post infection "	c: fcd.helper.T2-cell.secretes.cytokine.12		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.helper.T2-cell.12.hr ( *activated.helper.T2-cell.12.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( twelve.hours ( *twelve.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.helper.T2-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.helper.T2-cell ) true ) ) 		\ then.relates    ( ( secretes ( *IL-10 *activated.helper.T2-cell.9.hr ) true ) 		\ 				)		\ then.states    	( ( secreting ( *IL-10 *activated.helper.T2-cell.9.hr ) true )		\ 				)		\ then.create    	(  *IL-10 )		then.actors		( 		 				( 24.hours ( *24.hours ) true )		 				( activated.helper.T2-cell.24.hr ( *activated.helper.T2-cell.24.hr ) true ) 		 				( activated.helper.T2-cell.12.hr ( *activated.helper.T2-cell.12.hr ) false )		 				( nine.hours ( *nine.hours ) false ) ) 		then.say		"activated.helper.T2-cell (male splenocyte) does not secrete IFN-G at twelve hours post infection "			c: fcf.helper.T2-cell.secretes.cytokine.24		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.helper.T2-cell.24.hr ( *activated.helper.T2-cell.24.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( 24.hours ( *24.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.helper.T2-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.helper.T2-cell ) true ) ) 		then.relates    ( ( secretes ( *IL-10 *activated.helper.T2-cell.24.hr ) true ) 						)		then.states    	( ( secreting ( *IL-10 *activated.helper.T2-cell.24.hr ) true )						)		then.create    	(  *IL-10 )		then.actors		( 						( IL-10 ( *IL-10 ) true )		 				( activated.helper.T2-cell.24.hr ( *activated.helper.T2-cell.24.hr ) false )		 				( 24.hours ( *24.hours ) false ) ) 		then.say		"activated.helper.T2-cell secretes IL-10 at 24 hours post infection "				c:	ad.virus.abuts.cytotoxic.T-cell		level			basic		sub.of			phys.process		instance.of 	process.rule 		if.actors 		( ( virus ( *emcv-d ) true )						( cytotoxic.T-cell ( *cytotoxic.T-cell ) true ) )		\ then.relates    ( ( abuts ( *cytotoxic.T-cell *emcv-d ) true ) )		then.states     ( ( abutted ( *cytotoxic.T-cell ) true ) )		then.actors   	( ( abutted.cytotoxic.T-cell ( *abutted.cytotoxic.T-cell ) true ) 						( virus ( *emcv-d ) false )						( cytotoxic.T-cell ( *cytotoxic.T-cell ) false ) )		then.say		"  virus abuts cytotoxic.T-cell xyz "		c:  bd.virus.binding.cytotoxic.T-cell	level  		basic	sub.of		phys.process	instance.of process.rule \ popsim.rule	my.creator jwp njb	context 	immunology	\ 		( ( virus ( *emcv-d ) true ) 	if.actors 				( ( abutted.cytotoxic.T-cell ( *abutted.cytotoxic.T-cell ) true ) )	\ if.relates		( (  abuts ( *cytotoxic.T-cell *emcv-d ) true ) )	\ if.states 		( ( abutted ( *cytotoxic.T-cell ) true ) )	\ if.not.relates  ( ( binds ( *abutted.cytotoxic.T-cell *emcv-d ) true ) )	\ if.not.states 	( ( bound ( *abutted.cytotoxic.T-cell  ) true ) )			\ then.relates  	( ( binds ( *abutted.cytotoxic.T-cell *emcv-d ) true ) )	then.states  	( ( bound ( *abutted.cytotoxic.T-cell ) true ) )	then.actors   	( ( bound.cytotoxic.T-cell ( *cytotoxic.helper.T-cell ) true )										( abutted.cytotoxic.T-cell ( *abutted.cytotoxic.T-cell ) false ) )	then.say		" virus binds to cytotoxic.T-cell  xyz. "		c:	cd.virus.penetrates.cytotoxic.T-cell		level			basic		sub.of			phys.process		instance.of		process.rule 		\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( bound.cytotoxic.T-cell ( *bound.cytotoxic.T-cell ) true ) )		\ if.relates		( (  binds ( *abutted.cytotoxic.T-cell *emcv-d ) true ) )		\ if.states 		( ( bound ( *abutted.cytotoxic.T-cell ) true ) )		\ if.not.relates  ( ( penetrates ( *bound.cytotoxic.T-cell *emcv-d ) true ) )		\ if.not.states 	( ( penetrated ( *bound.cytotoxic.T-cell ) true ) )		\ then.relates    ( ( penetrates ( *bound.cytotoxic.T-cell *emcv-d ) true ) )		then.states 	( ( penetrated ( *bound.cytotoxic.T-cell ) true ) )		then.actors		( ( penetrated.cytotoxic.T-cell ( *penetrated.cytotoxic.T-cell ) true ) 						( bound.cytotoxic.T-cell ( *bound.cytotoxic.T-cell ) false ) )		then.say		"  virus penetrates cytotoxic.T-cell   xyz "		c:	dd.virus.induces.cytotoxic.T-cell		level			basic		sub.of			phys.process		instance.of		process.rule 		\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( penetrated.cytotoxic.T-cell ( *penetrated.cytotoxic.T-cell ) true ) )		\ if.relates		( (  penetrates ( *bound.cytotoxic.T-cell *emcv-d ) true ) )		\ if.states 		( ( penetrated ( *bound.cytotoxic.T-cell ) true ) )		\ if.not.relates  ( ( induces ( *penetrated.cytotoxic.T-cell *emcv-d ) true ) )		\ if.not.states 	( ( induced ( *penetrated.cytotoxic.T-cell ) true ) )		\ then.relates    ( ( induces ( *penetrated.cytotoxic.T-cell *emcv-d ) true ) )		then.states 	( ( induced ( *penetrated.cytotoxic.T-cell ) true ) )		then.actors		( ( induced.cytotoxic.T-cell ( *induced.cytotoxic.T-cell ) true ) 												( penetrated.cytotoxic.T-cell ( *penetrated.cytotoxic.T-cell ) false ) )		then.say		"  virus induces cytotoxic.T-cell  xyz "		c:	ed.virus.activates.cytotoxic.T-cell		level			basic		sub.of			phys.process		instance.of		process.rule 			\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( induced.cytotoxic.T-cell ( *induced.cytotoxic.T-cell ) true ) )		\ if.relates		( ( induces ( *penetrated.cytotoxic.T-cell *emcv-d ) true ) )		\ if.states 		( ( induced ( *penetrated.cytotoxic.T-cell ) true ) )		\ if.not.relates  ( ( activates ( *induced.cytotoxic.T-cell *emcv-d ) true ) )		\ if.not.states 	( ( activated ( *induced.cytotoxic.T-cell ) true ) )		\ then.relates    ( ( activates ( *induced.cytotoxic.T-cell *emcv-d ) true ) )		then.states     ( ( activated ( *induced.cytotoxic.T-cell ) true ) )		then.actors   	( ( activated.cytotoxic.T-cell ( *activated.cytotoxic.T-cell ) true ) 						( induced.cytotoxic.T-cell ( *induced.cytotoxic.T-cell ) false ) )		then.say		"  virus activates cytotoxic.T-cell  xyz "			c: fd.cytotoxic.T-cell.secretes.cytokine.zero		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.cytotoxic.T-cell ( *activated.cytotoxic.T-cell ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.cytotoxic.T-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.cytotoxic.T-cell ) true ) )		then.actors   	( ( activated.cytotoxic.T-cell ( *activated.cytotoxic.T-cell ) false ) )		then.say		"activated.cytotoxic.T-cell secretes ? cytokines"				c:	ae.virus.abuts.B-cell		level			basic		sub.of			phys.process		instance.of 	process.rule 		if.actors 		( ( virus ( *emcv-d ) true )						( B-cell ( *B-cell ) true ) )		\ then.relates    ( ( abuts ( *B-cell *emcv-d ) true ) )		then.states     ( ( abutted ( *B-cell ) true ) )		then.actors   	( ( abutted.B-cell ( *abutted.B-cell ) true )						( virus ( *emcv-d ) false ) 						( B-cell ( *B-cell ) false ) )		then.say		"  virus abuts B-cell xyz "	c:  be.virus.binding.B-cell	level  		basic	sub.of		phys.process	instance.of process.rule \ popsim.rule	my.creator jwp njb	context 	immunology	\   		( ( virus ( *emcv-d ) true ) 	if.actors				( ( abutted.B-cell ( *abutted.B-cell ) true ) )	\ if.relates		( (  abuts ( *B-cell *emcv-d ) true ) )	\ if.states 		( ( abutted ( *B-cell ) true ) )	\ if.not.relates  ( ( binds ( *abutted.B-cell *emcv-d ) true ) )	\ if.not.states 	( ( bound ( *abutted.B-cell ) true ) )			\ then.relates  	( ( binds ( *abutted.B-cell *emcv-d ) true ) )	then.states  	( ( bound ( *abutted.B-cell ) true ) )	then.actors   	( ( bound.B-cell ( *bound.B-cell ) true )										( abutted.B-cell ( *abutted.B-cell ) false ) )	then.say		" virus binds to B-cell  xyz. "			c:	ce.virus.penetrates.B-cell		level			basic		sub.of			phys.process		instance.of		process.rule 		\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( bound.B-cell ( *bound.B-cell ) true ) )		\ if.relates		( (  binds ( *abutted.B-cell *emcv-d ) true ) )		\ if.states 		( ( bound ( *abutted.B-cell ) true ) )		\ if.not.relates  ( ( penetrates ( *bound.B-cell *emcv-d ) true ) )		\ if.not.states 	( ( penetrated ( *bound.B-cell ) true ) )		\ then.relates    ( ( penetrates ( *bound.B-cell *emcv-d ) true ) )		then.states 	( ( penetrated ( *bound.B-cell ) true ) )		then.actors		( ( penetrated.B-cell ( *penetrated.B-cell ) true ) 						( bound.B-cell ( *bound.B-cell ) false ) )		then.say		"  virus penetrates B-cell  xyz "		c:	de.virus.induces.B-cell		level			basic		sub.of			phys.process		instance.of		process.rule 			\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( penetrated.B-cell ( *penetrated.B-cell ) true ) )		\ if.relates		( (  penetrates ( *bound.B-cell *emcv-d ) true ) )		\ if.states 		( ( penetrated ( *bound.B-cell ) true ) )		\ if.not.relates  ( ( induces ( *penetrated.B-cell *emcv-d ) true ) )		\ if.not.states 	( ( induced ( *penetrated.B-cell ) true ) )		\ then.relates    ( ( induces ( *penetrated.B-cell *emcv-d ) true ) )		then.states 	( ( induced ( *penetrated.B-cell ) true ) )		then.actors		( ( induced.B-cell ( *induced.B-cell ) true ) 						( penetrated.B-cell ( *penetrated.B-cell ) false ) )		then.say		"  virus induces B-cell  xyz "			c:	ee.virus.activates.B-cell		level			basic		sub.of			phys.process		instance.of		process.rule 			\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( induced.B-cell ( *induced.B-cell ) true ) )		\ if.relates		( ( induces ( *penetrated.B-cell *emcv-d ) true ) )		\ if.states 		( ( induced ( *penetrated.B-cell ) true ) )		\ if.not.relates  ( ( activates ( *induced.B-cell *emcv-d ) true ) )		\ if.not.states 	( ( activated ( *induced.B-cell ) true ) )		\ then.relates    ( ( activates ( *induced.B-cell *emcv-d ) true ) )		then.states    	( ( activated ( *induced.B-cell ) true ) )		then.actors   	( ( activated.B-cell ( *activated.B-cell ) true ) 						( induced.B-cell ( *induced.B-cell ) false ) )		then.say		"  virus activates B-cell  xyz "											c: fe.B-cell.secretes.cytokine.zero		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.B-cell ( *activated.B-cell ) true )						( female.mouse ( *female.mouse ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.B-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.B-cell ) true ) ) 		then.create    	( *IL-1 )		then.relates    ( ( secretes ( *IL-1 *activated.B-cell ) true ) )		then.states    	( ( secreting ( *IL-1 *activated.B-cell ) true ) )		then.actors		( ( IL-1 ( *IL-1 ) true )   		 				( activated.B-cell.3.hr ( *activated.B-cell.3.hr ) true ) 		 				( three.hours ( *three.hours ) true ) 		 				( activated.B-cell ( *activated.B-cell ) false ) )		then.say		"activated.B-cell secretes cytokines "		c: fab.B-cell.secretes.cytokine.three		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.B-cell.3.hr ( *activated.B-cell.3.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( three.hours ( *three.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.B-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.B-cell ) true ) )		then.create    	( *IL-12 )		then.relates    ( ( secretes ( *IL-12 *activated.B-cell.3.hr ) true ) )		then.states    	( ( secreting ( *IL-12 *activated.B-cell.3.hr ) true ) ) 		then.actors		( ( IL-12 ( *IL-12 ) true )		 				( six.hours ( *six.hours ) true ) 		 				( activated.B-cell.6.hr ( *activated.B-cell.6.hr ) true )		 				( activated.B-cell.3.hr ( *activated.B-cell.3.hr ) false ) 		 				( three.hours ( *three.hours ) false ) ) 		then.say		"activated B-cell secretes IL-12 at three hours post infection "		c: fac.B-cell.secretes.cytokine.six		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.B-cell.6.hr ( *activated.B-cell.6.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( six.hours ( *six.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.B-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.B-cell ) true ) ) 		then.relates    ( ( secretes ( *IL-12 *activated.B-cell.6.hr ) true ) 						( secretes ( *IL-10 *activated.B-cell.6.hr ) true ) )		then.states    	( ( secreting ( *IL-12 *activated.B-cell.6.hr ) true )						( secreting ( *IL-10 *activated.B-cell.6.hr ) true ) )		then.create    	( *IL-12  *IL-10 )		then.actors		( ( IL-12 ( *IL-12 ) true )						( IL-10 ( *IL-10 ) true )		 				( nine.hours ( *nine.hours ) true )		 				( activated.B-cell.9.hr ( *activated.B-cell.9.hr ) true ) 		 				( activated.B-cell.6.hr ( *activated.B-cell.6.hr ) false )		 				( six.hours ( *six.hours ) false ) ) 		then.say		"activated.B-cell secretes IL-12 and IL-10 at six hours post infection "				c: fac.B-cell.secretes.cytokine.nine		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.B-cell.9.hr ( *activated.B-cell.9.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( nine.hours ( *nine.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.B-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.B-cell ) true ) ) 		then.relates    ( ( secretes ( *IL-10 *activated.B-cell.9.hr ) true ) 						)		then.states    	( ( secreting ( *IL-10 *activated.B-cell.9.hr ) true )						)		then.create    	(  *IL-10 )		then.actors		( ( IL-12 ( *IL-12 ) false )						( IL-10 ( *IL-10 ) true )		 				( 24.hours ( *24.hours ) true )		 				( activated.B-cell.24.hr ( *activated.B-cell.24.hr ) true ) 		 				( activated.B-cell.9.hr ( *activated.B-cell.9.hr ) false )		 				( nine.hours ( *nine.hours ) false ) ) 		then.say		"activated.B-cell secretes IL-10 and not IL-12 at nine hours post infection "				c: fac.B-cell.secretes.cytokine.24		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.B-cell.24.hr ( *activated.B-cell.24.hr ) true )						( female.mouse ( *female.mouse ) true ) 						( 24.hours ( *24.hours ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.B-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.B-cell) true ) ) 		then.relates    ( ( secretes ( *IL-10 *activated.B-cell.24.hr ) true ) 						)		then.states    	( ( secreting ( *IL-10 *activated.B-cell.24.hr ) true )						)		then.create    	(  *IL-10 )		then.actors		( 						( IL-10 ( *IL-10 ) true )		 				( activated.B-cell.24.hr ( *activated.B-cell.24.hr ) false )		 				( 24.hours ( *24.hours ) false ) ) 		then.say		"activated.B-cell secretes IL-10 at 24 hours post infection "																						c:	af.virus.abuts.NK-cell		level			basic		sub.of			phys.process		instance.of 	process.rule		if.actors 		( ( virus ( *emcv-d ) true )						( NK-cell ( *NK-cell ) true ) )		\ then.relates    ( ( abuts ( *NK-cell *emcv-d ) true ) )		then.states     ( ( abutted ( *NK-cell ) true ) )		then.actors   	( ( abutted.NK-cell ( *abutted.NK-cell ) true ) 						( virus ( *emcv-d ) false )						( NK-cell ( *NK-cell ) false ) )		then.say		"  virus abuts NK-cell xyz "							  c:  bf.virus.binding.NK-cell	level  		basic	sub.of		phys.process	instance.of process.rule  \ popsim.rule	my.creator jwp njb	context 	immunology	\ if.actors  		( ( virus ( *emcv-d ) true ) 	if.actors				( ( abutted.NK-cell ( *NK-cell ) true ) )	\ if.relates		( (  abuts ( *NK-cell *emcv-d ) true ) )	\ if.states 		( ( abutted ( *NK-cell ) true ) )	\ if.not.relates  ( ( binds ( *abutted.NK-cell *emcv-d ) true ) )	\ if.not.states 	( ( bound ( *abutted.NK-cell ) true ) )			\ then.relates  	( ( binds ( *abutted.NK-cell *emcv-d ) true ) )	then.states  	( ( bound ( *abutted.NK-cell ) true ) )	then.actors   	( ( bound.NK-cell ( *bound.NK-cell ) true ) 										( abutted.NK-cell ( *NK-cell ) false ) )	then.say		" virus binds to NK-cell  xyz. "		c:	cf.virus.penetrates.NK-cell		level			basic		sub.of			phys.process		instance.of		process.rule 		\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( bound.NK-cell ( *bound.NK-cell ) true ) )		\ if.relates		( (  binds ( *abutted.NK-cell *emcv-d ) true ) )		\ if.states 		( ( bound ( *abutted.NK-cell ) true ) )		\ if.not.relates  ( ( penetrates ( *bound.NK-cell *emcv-d ) true ) )		\ if.not.states 	( ( penetrated ( *bound.NK-cell ) true ) )		\ then.relates    ( ( penetrates ( *bound.NK-cell *emcv-d ) true ) )		then.states 	( ( penetrated ( *bound.NK-cell ) true ) )		then.actors		( ( penetrated.NK-cell ( *penetrated.NK-cell ) true ) 						( bound.NK-cell ( *bound.NK-cell ) false ) )		then.say		"  virus penetrates NK-cell  xyz "					c:	df.virus.induces.NK-cell		level			basic		sub.of			phys.process		instance.of		process.rule 			\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( penetrated.NK-cell ( *penetrated.NK-cell ) true ) )		\ if.relates		( (  penetrates ( *bound.NK-cell *emcv-d ) true ) )		\ if.states 		( ( penetrated ( *bound.NK-cell ) true ) )		\ if.not.relates  ( ( induces ( *penetrated.NK-cell *emcv-d ) true ) )		\ if.not.states 	( ( induced ( *penetrated.NK-cell ) true ) )		\ then.relates    ( ( induces ( *penetrated.NK-cell *emcv-d ) true ) )		then.states 	( ( induced ( *penetrated.NK-cell ) true ) )		then.actors		( ( induced.NK-cell ( *induced.NK-cell ) true ) 						( penetrated.NK-cell ( *penetrated.NK-cell ) false ) )		then.say		"  virus induces NK-cell  xyz "			c:	ef.virus.activates.NK-cell		level			basic		sub.of			phys.process		instance.of		process.rule 			\ if.actors 		( ( virus ( *emcv-d ) true )		if.actors				( ( induced.NK-cell ( *NK-cell ) true ) )		\ if.relates		( ( induces ( *penetrated.NK-cell *emcv-d ) true ) )		\ if.states 		( ( induced ( *penetrated.NK-cell ) true ) )		\ if.not.relates  ( ( activates ( *induced.NK-cell *emcv-d ) true ) )		\ if.not.states 	( ( activated ( *induced.NK-cell ) true ) )		\ then.relates    ( ( activates ( *induced.NK-cell *emcv-d ) true ) )		then.states    	( ( activated ( *induced.NK-cell ) true ) )		then.actors   	( ( activated.NK-cell ( *activated.NK-cell ) true )						( induced.NK-cell ( *NK-cell ) false ) )		then.say		"  virus activates NK-cell  xyz "				c: ff.NK-cell.secretes.cytokine		level			basic		sub.of			phys.process		instance.of		process.rule			if.actors 		( ( activated.NK-cell ( *activated.NK-cell ) true ) 						( female.mouse ( *female.mouse ) true ) )						\ ( virus ( *emcv-d ) true ) )		\ if.relates		( ( activates ( *induced.NK-cell *emcv-d ) true ) )		\ if.states		( ( activated ( *induced.NK-cell ) true ) ) 		\ then.create    	( *IFN-gamma )		then.actors		( ( activated.NK-cell ( *activated.NK-cell ) false ) ) 		\ then.relates    ( ( secretes ( *IFN-gamma *activated.NK-cell ) true ) )		\ then.states    	( ( secreting ( *IFN-gamma *activated.NK-cell ) true ) )		then.say		"activated.NK-cell secretes unknown cytokines"				c:	increasing.quantity			instance.of 	sense.rule		if.actors		( ( quantity ( *quantity ) true ) )		if.relates		( ( increases ( *quantity ) true ) )		then.say     	"  quantity is increasing "		c:	decreasing.quantity	 		instance.of		sense.rule		if.actors		( ( quantity ( *quantity ) true ) )		if.relates		( ( decreases ( *quantity ) true ) )		then.say     	" quantity is decreasing " 	   		